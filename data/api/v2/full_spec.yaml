components:
  callbacks: {}
  examples: {}
  headers: {}
  links: {}
  parameters:
    ArchiveID:
      description: The ID of the archive.
      in: path
      name: archive_id
      required: true
      schema:
        type: string
    FilterRequiredQueryParameter:
      description: Only include required objects in the response.
      in: query
      name: filter[required]
      required: false
      schema:
        default: false
        type: boolean
    IncidentIDPathParameter:
      description: The ID(`incident_id`) of the incident.
      in: path
      name: incident_id
      required: true
      schema:
        type: string
    IncidentIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        - user_defined_fields
        - user_defined_field_selections
        type: string
    IncidentIntegrationMetadataIDPathParameter:
      description: The ID of the incident integration metadata.
      in: path
      name: metadata_id
      required: true
      schema:
        type: string
    IncidentPostmortemIDPathParameter:
      description: The ID of the postmortem.
      in: path
      name: postmortem_id
      required: true
      schema:
        type: string
    IncidentSearchIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - user_defined_field
        - user_defined_field_selections
        - teams
        - services
        - all
        type: string
    IncidentSearchQueryQueryParameter:
      description: "A query string written in a simple grammar which supports `key:value`\
        \ and text terms. Examples:\n  `severity:(SEV-1 AND SEV-2)`\n  `state:resolved\
        \ AND commander.handle:john`\n  `\"the site is down\" AND teams:\"Team Red\"\
        `"
      in: query
      name: query
      required: false
      schema:
        nullable: false
        type: string
    IncidentServiceIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        type: string
    IncidentTeamIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        type: string
    IncidentTimelineCellIDPathParameter:
      description: The ID of the timeline cell.
      in: path
      name: cell_id
      required: true
      schema:
        type: string
    IncidentTimelineCellIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        type: string
    IncidentToDoIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        type: string
    IncidentTodoIDPathParameter:
      description: The ID of the incident to-do.
      in: path
      name: todo_id
      required: true
      schema:
        type: string
    PageNumber:
      description: Specific page number to return.
      in: query
      name: page[number]
      required: false
      schema:
        default: 0
        format: int64
        type: integer
    PageSize:
      description: Size for a given page.
      in: query
      name: page[size]
      required: false
      schema:
        default: 10
        format: int64
        type: integer
    PageSortFieldQueryParameter:
      description: Sort field to use.
      in: query
      name: page[sort_field]
      required: false
      schema:
        type: string
    PageSortQueryParameter:
      description: Sort direction.
      in: query
      name: page[sort]
      required: false
      schema:
        default: asc
        enum:
        - asc
        - desc
        type: string
    PostmortemIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        - user_defined_fields
        - user_defined_field_selections
        type: string
    RestrictionQueryID:
      description: The ID of the restriction query.
      in: path
      name: restriction_query_id
      required: true
      schema:
        type: string
    RestrictionQueryRoleID:
      description: The ID of the role.
      in: path
      name: role_id
      required: true
      schema:
        type: string
    RestrictionQueryUserID:
      description: The ID of the user.
      in: path
      name: user_id
      required: true
      schema:
        type: string
    RoleID:
      description: The ID of the role.
      in: path
      name: role_id
      required: true
      schema:
        type: string
    SecurityMonitoringRuleID:
      description: The ID of the rule.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    ServiceIDPathParameter:
      description: The ID of the service.
      in: path
      name: service_id
      required: true
      schema:
        type: string
    ServiceIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        type: string
    TagKeySearchQueryParameter:
      description: Search query to be used to filter results
      in: query
      name: query
      required: false
      schema:
        default: false
        type: boolean
    TagValuesTagKeyQueryParameter:
      description: Tag key for which values are returned
      in: query
      name: tag_key
      required: true
      schema:
        default: false
        type: boolean
    TeamIDPathParameter:
      description: The ID of the team.
      in: path
      name: team_id
      required: true
      schema:
        type: string
    TeamIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        type: string
    UserDefinedFieldChoiceIDPathParameter:
      description: The ID of the incident field choice.
      in: path
      name: choice_id
      required: true
      schema:
        type: string
    UserDefinedFieldChoiceIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        type: string
    UserDefinedFieldIDPathParameter:
      description: The ID of the user-defined field.
      in: path
      name: field_id
      required: true
      schema:
        type: string
    UserDefinedFieldIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        - user_defined_field_choices
        type: string
    UserDefinedFieldSelectionIDPathParameter:
      description: The ID of the incident field selection.
      in: path
      name: selection_id
      required: true
      schema:
        type: string
    UserDefinedFieldSelectionIncludeQueryParameter:
      description: Include related resources in the `included` field of the JSON API
        response wrapper.
      in: query
      name: include
      required: false
      schema:
        enum:
        - users
        - user_defined_fields
        - user_defined_field_choices
        type: string
    UserID:
      description: The ID of the user.
      in: path
      name: user_id
      required: true
      schema:
        type: string
    WithUsersQueryParameter:
      description: Include user data in api response.
      in: query
      name: include[users]
      required: false
      schema:
        default: false
        type: boolean
  requestBodies: {}
  responses:
    204DefaultResponse:
      description: DELETED
    400DefaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    401DefaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Authentication error
    403DefaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    404DefaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
    409DefaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Conflict
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    ConcurrentModificationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Concurrent Modification
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Authorized
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
  schemas:
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
      - errors
      type: object
    BasicUserRelationships:
      description: JSON API relationships for users who created and modified an object
        when no other users are related by other names.
      properties:
        created_by:
          $ref: '#/components/schemas/UserRelationship'
        last_modified_by:
          $ref: '#/components/schemas/UserRelationship'
      readOnly: true
      type: object
    Creator:
      description: Creator of the object.
      properties:
        email:
          description: Email of the creator.
          type: string
        handle:
          description: Handle of the creator.
          type: string
        name:
          description: Name of the creator.
          type: string
      type: object
    DashboardListAddItemsRequest:
      description: Request containing a list of dashboards to add.
      properties:
        dashboards:
          description: List of dashboards to add the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItemRequest'
          type: array
      type: object
    DashboardListAddItemsResponse:
      description: Response containing a list of added dashboards.
      properties:
        added_dashboards_to_list:
          description: List of dashboards added to the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItemResponse'
          type: array
      type: object
    DashboardListDeleteItemsRequest:
      description: Request containing a list of dashboards to delete.
      properties:
        dashboards:
          description: List of dashboards to delete from the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItemRequest'
          type: array
      type: object
    DashboardListDeleteItemsResponse:
      description: Response containing a list of deleted dashboards.
      properties:
        deleted_dashboards_from_list:
          description: List of dashboards deleted from the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItemResponse'
          type: array
      type: object
    DashboardListItem:
      description: A dashboard within a list.
      properties:
        author:
          $ref: '#/components/schemas/Creator'
        created:
          description: Date of creation of the dashboard.
          format: date-time
          readOnly: true
          type: string
        icon:
          description: URL to the icon of the dashboard.
          readOnly: true
          type: string
        id:
          description: ID of the dashboard.
          example: q5j-nti-fv6
          type: string
        is_favorite:
          description: Whether or not the dashboard is in the favorites.
          readOnly: true
          type: boolean
        is_read_only:
          description: Whether or not the dashboard is read only.
          readOnly: true
          type: boolean
        is_shared:
          description: Whether the dashboard is publicly shared or not.
          readOnly: true
          type: boolean
        modified:
          description: Date of last edition of the dashboard.
          format: date-time
          readOnly: true
          type: string
        popularity:
          description: Popularity of the dashboard.
          format: int32
          maximum: 5
          readOnly: true
          type: integer
        title:
          description: Title of the dashboard.
          readOnly: true
          type: string
        type:
          $ref: '#/components/schemas/DashboardType'
        url:
          description: URL path to the dashboard.
          readOnly: true
          type: string
      required:
      - type
      - id
      type: object
    DashboardListItemRequest:
      description: A dashboard within a list.
      properties:
        id:
          description: ID of the dashboard.
          example: q5j-nti-fv6
          type: string
        type:
          $ref: '#/components/schemas/DashboardType'
      required:
      - type
      - id
      type: object
    DashboardListItemResponse:
      description: A dashboard within a list.
      properties:
        id:
          description: ID of the dashboard.
          example: q5j-nti-fv6
          readOnly: true
          type: string
        type:
          $ref: '#/components/schemas/DashboardType'
      required:
      - type
      - id
      type: object
    DashboardListItems:
      description: Dashboards within a list.
      properties:
        dashboards:
          description: List of dashboards in the dashboard list.
          example: []
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
        total:
          description: Number of dashboards in the dashboard list.
          format: int64
          readOnly: true
          type: integer
      required:
      - dashboards
      type: object
    DashboardListUpdateItemsRequest:
      description: Request containing the list of dashboards to update to.
      properties:
        dashboards:
          description: List of dashboards to update the dashboard list to.
          items:
            $ref: '#/components/schemas/DashboardListItemRequest'
          type: array
      type: object
    DashboardListUpdateItemsResponse:
      description: Response containing a list of updated dashboards.
      properties:
        dashboards:
          description: List of dashboards in the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItemResponse'
          type: array
      type: object
    DashboardType:
      description: The type of the dashboard.
      enum:
      - custom_timeboard
      - custom_screenboard
      - integration_screenboard
      - integration_timeboard
      - host_timeboard
      type: string
      x-enum-varnames:
      - CUSTOM_TIMEBOARD
      - CUSTOM_SCREENBOARD
      - INTEGRATION_SCREENBOARD
      - INTEGRATION_TIMEBOARD
      - HOST_TIMEBOARD
    EmbeddedIncidentsUser:
      description: JSON API user payload.
      properties:
        attributes:
          description: The embedded user's attributes.
          properties:
            email:
              description: Email of the user.
              example: john@example.com
              type: string
            handle:
              description: Handle of the user.
              example: username
              type: string
            icon:
              description: URL of the user's icon.
              example: https://example.com/image.png
              type: string
            name:
              description: Name of the user.
              example: example user
              type: string
            uuid:
              description: Unique ID of the user.
              example: 00000000-0000-0000-0000-000000000000
              type: string
          type: object
        id:
          description: ID of the user.
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    Incident:
      description: An incident record to store information about incident response.
      properties:
        attributes:
          description: The Incident attributes.
          properties:
            commander:
              description: An embedded JSON API object of the user who oversaw this
                incident response.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            created:
              description: Timestamp when an incident was created.
              format: date-time
              readOnly: true
              type: string
            created_by:
              description: An embedded JSON API object of the user who created this
                field.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            created_by_uuid:
              description: The ID of the user who created this field.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            creation_idempotency_key:
              description: A key to be used when a client cannot await a success response
                and must retry calls until the record with this key exists.
              nullable: true
              type: string
            customer_impact_duration:
              description: Length of the incident's customer impact in seconds. Equals
                the delta between `customer_impact_start` and `customer_impact_end`.
              format: int64
              readOnly: true
              type: integer
            customer_impact_end:
              description: Timestamp when customers were no longer impacted by the
                incident.
              format: date-time
              nullable: true
              type: string
            customer_impact_scope:
              description: A human-readable description of the impact to customers
                during this incident.
              type: string
            customer_impact_start:
              description: Timestamp when customers began being impacted by the incident.
              format: date-time
              nullable: true
              type: string
            customer_impacted:
              description: Flag set to true if customers were impacted by the incident.
              type: boolean
            detected:
              description: Timestamp when an incident was detected.
              format: date-time
              nullable: true
              type: string
            last_modified_by:
              description: An embedded JSON API object of the user who last modified
                this field.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            last_modified_uuid:
              description: The ID of the user who last modified this field.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            modified:
              description: Timestamp when an incident was last modified.
              format: date-time
              readOnly: true
              type: string
            postmortem_id:
              description: The ID for the postmortem associated with an incident.
              example: cbbe9e15d3bf55858eee5ffad3619798
              readOnly: true
              type: string
            public_id:
              description: Auto-incremented ID for each incident. These are unique
                to each incident belonging to an organization.
              format: int64
              readOnly: true
              type: integer
            resolved:
              description: Timestamp when an incident's state was set to resolved.
              format: date-time
              nullable: true
              type: string
            state:
              description: The current state if an incident.
              example: active
              type: string
            time_to_detect:
              description: The amount of time in seconds to detect the incident. Equals
                the delta between `customer_impact_start` and `detected`.
              format: int64
              readOnly: true
              type: integer
            time_to_internal_response:
              description: The amount of time in seconds to call incident after detection.
                Equals the delta of `detected` - `created`.
              format: int64
              readOnly: true
              type: integer
            time_to_repair:
              description: The amount of time in seconds to resolve customer impact
                after detecting the issue. Equals the delta between `customer_impact_end`
                - `detected`.
              format: int64
              readOnly: true
              type: integer
            title:
              description: The title of the incident.
              type: string
          type: object
        id:
          description: The Incident ID.
          example: 602e6271ade05cfa8ff193594a801aca
          readOnly: true
          type: string
        relationships:
          description: JSON API relationships.
          properties:
            commander_user:
              $ref: '#/components/schemas/UserRelationship'
            created_by_user:
              $ref: '#/components/schemas/UserRelationship'
            last_modified_by_user:
              $ref: '#/components/schemas/UserRelationship'
            services:
              description: The services associated with this incident.
              properties:
                data:
                  description: The service ID array.
                  items:
                    $ref: '#/components/schemas/ServiceRelationship'
                  type: array
              type: object
            teams:
              description: The teams associated with this incident.
              properties:
                data:
                  description: The team ID array.
                  items:
                    $ref: '#/components/schemas/TeamRelationship'
                  type: array
              type: object
            user_defined_field_selections:
              description: The user-defined field selections which hold values for
                user-defined fields of this incident.
              properties:
                data:
                  description: The user-defined field selections ID array.
                  items:
                    $ref: '#/components/schemas/UserDefinedFieldSelectionRelationship'
                  type: array
              type: object
            user_defined_fields:
              description: The user-defined fields available for all incidents belonging
                to the requesting user's organization.
              properties:
                data:
                  description: The field ID array.
                  items:
                    $ref: '#/components/schemas/UserDefinedFieldRelationship'
                  type: array
              type: object
          type: object
        type:
          $ref: '#/components/schemas/IncidentType'
      type: object
    IncidentArray:
      description: An array of Incidents.
      items:
        $ref: '#/components/schemas/Incident'
      type: array
    IncidentCreateRequestWithInitialData:
      description: JSON API request with a incident payload that include initial data
        fields.
      properties:
        data:
          $ref: '#/components/schemas/IncidentCreateWithInitialData'
      required:
      - data
      type: object
    IncidentCreateWithInitialData:
      description: For creating incidents you can also pass initial data for signals
        and choice selections
      properties:
        attributes:
          description: The Incident attributes.
          properties:
            commander:
              description: An embedded JSON API object of the user who oversaw this
                incident response for initial data payload.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            created:
              description: Timestamp when an incident was created.
              format: date-time
              readOnly: true
              type: string
            created_by:
              description: An embedded JSON API object of the user who created this
                field for initial data payload.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            created_by_uuid:
              description: The ID of the user who created this field.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            creation_idempotency_key:
              description: A key to be used when a client cannot await a success response
                and must retry calls until the record with this key exists.
              nullable: true
              type: string
            customer_impact_duration:
              description: Length of the incident's customer impact in seconds. Equals
                the delta between `customer_impact_start` and `customer_impact_end`.
              format: int64
              readOnly: true
              type: integer
            customer_impact_end:
              description: Timestamp when customers were no longer impacted by the
                incident.
              format: date-time
              nullable: true
              type: string
            customer_impact_scope:
              description: A human-readable description of the impact to customers
                during this incident.
              type: string
            customer_impact_start:
              description: Timestamp when customers began being impacted by the incident.
              format: date-time
              nullable: true
              type: string
            customer_impacted:
              description: Flag set to true if customers were impacted by the incident.
              type: boolean
            detected:
              description: Timestamp when an incident was detected.
              format: date-time
              nullable: true
              type: string
            initial_cells:
              description: An array of initial timeline cell definitions to include.
              items:
                $ref: '#/components/schemas/IncidentTimelineCellAttributes'
              type: array
            initial_user_defined_field_choices:
              description: An array of initial choices when creating an incident.
              items:
                $ref: '#/components/schemas/IncidentInitialUserDefinedFieldChoices'
              type: array
            last_modified_by:
              description: An embedded JSON API object of the user who last modified
                this field for initial data payload.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            last_modified_uuid:
              description: The ID of the user who last modified this field.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            modified:
              description: Timestamp when an incident was last modified.
              format: date-time
              readOnly: true
              type: string
            postmortem_id:
              description: The ID for the postmortem associated with an incident.
              example: cbbe9e15d3bf55858eee5ffad3619798
              readOnly: true
              type: string
            public_id:
              description: Auto-incremented ID for each incident. These are unique
                to each incident belonging to an organization.
              format: int64
              readOnly: true
              type: integer
            resolved:
              description: Timestamp when an incident's state was set to resolved.
              format: date-time
              nullable: true
              type: string
            state:
              description: The current state if an incident.
              example: active
              type: string
            time_to_detect:
              description: The amount of time in seconds to detect the incident. Equals
                the delta between `customer_impact_start` and `detected`.
              format: int64
              readOnly: true
              type: integer
            time_to_internal_response:
              description: The amount of time in seconds to detect the incidents occurrence.
                Represents the delta of detected - created.
              format: int64
              readOnly: true
              type: integer
            time_to_repair:
              description: The amount of time in seconds to resolve customer impact
                after detecting the issue. Equals the delta between `customer_impact_end`
                - `detected`.
              format: int64
              readOnly: true
              type: integer
            title:
              description: The title of the incident.
              type: string
          type: object
        relationships:
          description: JSON API relationships.
          properties:
            commander:
              description: The user who will be assigned as commander.
              properties:
                data:
                  description: The commander assignee's data.
                  properties:
                    id:
                      description: The user ID for the commander assignee.
                      example: 677897dd-eb6d-11e9-a34b-b7c03b6671c1
                      type: string
                    type:
                      $ref: '#/components/schemas/UsersType'
                  type: object
              type: object
          type: object
        type:
          $ref: '#/components/schemas/IncidentType'
      type: object
    IncidentFacetPercentilesAggregation:
      description: A `percentiles` aggregation for facets.
      properties:
        data:
          description: A facet definition.
          properties:
            p1:
              description: The 1% distribution value.
              format: double
              nullable: true
              readOnly: true
              type: number
            p25:
              description: The 25% distribution value.
              format: double
              nullable: true
              readOnly: true
              type: number
            p5:
              description: The 5% distribution value.
              format: double
              nullable: true
              readOnly: true
              type: number
            p50:
              description: The 50% distribution value.
              format: double
              nullable: true
              readOnly: true
              type: number
            p75:
              description: The 75% distribution value.
              format: double
              nullable: true
              readOnly: true
              type: number
            p95:
              description: The 95% distribution value.
              format: double
              nullable: true
              readOnly: true
              type: number
            p99:
              description: The 99% distribution value.
              format: double
              nullable: true
              readOnly: true
              type: number
          type: object
        type:
          $ref: '#/components/schemas/PercentilesIncidentFacetType'
      type: object
    IncidentFacetSchema:
      description: Facets data comes in one of several types.
      oneOf:
      - $ref: '#/components/schemas/IncidentFacetTermsAggregation'
      - $ref: '#/components/schemas/IncidentFacetStatsAggregation'
      - $ref: '#/components/schemas/IncidentFacetPercentilesAggregation'
      required:
      - type
      type: object
    IncidentFacetStatsAggregation:
      description: A `stats` aggregation for facets.
      properties:
        data:
          description: A facet definition.
          properties:
            avg:
              description: The average value.
              format: double
              nullable: true
              readOnly: true
              type: number
            count:
              description: The count of matches.
              format: double
              nullable: true
              readOnly: true
              type: number
            max:
              description: The max value.
              format: double
              nullable: true
              readOnly: true
              type: number
            min:
              description: The min value.
              format: double
              nullable: true
              readOnly: true
              type: number
            sum:
              description: The sum of values.
              format: double
              nullable: true
              readOnly: true
              type: number
          type: object
        type:
          $ref: '#/components/schemas/StatsIncidentFacetType'
      type: object
    IncidentFacetTermsAggregation:
      description: A `terms` aggregation for facets.
      properties:
        data:
          description: A facet definition.
          properties:
            count:
              description: A count of the terms.
              format: int64
              nullable: true
              readOnly: true
              type: integer
            name:
              description: String form of the facet.
              readOnly: true
              type: string
          type: object
        type:
          $ref: '#/components/schemas/TermsIncidentFacetType'
      type: object
    IncidentIncludedItems:
      description: An object related to an incident which is included in the JSON
        API response.
      oneOf:
      - $ref: '#/components/schemas/EmbeddedIncidentsUser'
      - $ref: '#/components/schemas/UserDefinedField'
      - $ref: '#/components/schemas/UserDefinedFieldSelection'
      - $ref: '#/components/schemas/Team'
      - $ref: '#/components/schemas/Service'
      type: object
    IncidentInitialUserDefinedFieldChoices:
      description: The initial choice selections.
      properties:
        choice_id:
          description: The user-defined field choice being initially selected.
          example: bfba0c19960c580c9e0d126ca99dcd0e
          type: string
        field_id:
          description: The user-defined field ID for which an initial selection is
            being made.
          example: 1ca4bb7cf8925045b0cf7905d19e42df
          type: string
      required:
      - field_id
      - choice_id
      type: object
    IncidentIntegrationMetadata:
      description: Represents a selection for a particular field and object of that
        field's table_id.
      properties:
        attributes:
          description: The selection's attributes.
          properties:
            completed:
              description: Timestamp when a metadata was completed.
              format: date-time
              readOnly: true
              type: string
            created:
              description: Timestamp when a metadata was created.
              format: date-time
              readOnly: true
              type: string
            created_by:
              description: An embedded JSON API object of the user who created this
                integration metadata.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            created_by_uuid:
              description: The ID of the user who created this integration metadata.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            integration_type:
              $ref: '#/components/schemas/IncidentIntegrationMetadataTypeID'
            last_modified_by:
              description: An embedded JSON API object of the user who most recently
                modified this integration metadata.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            last_modified_uuid:
              description: The ID of the user who last modified this integration metadata.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            metadata:
              description: Structured metadata content for the integration type.
              type: string
            modified:
              description: Timestamp when a metadata was modified.
              format: date-time
              readOnly: true
              type: string
          type: object
        id:
          description: The selection's ID.
          example: b229d4cddfa35f02a82a878cabf5889b
          readOnly: true
          type: string
        relationships:
          $ref: '#/components/schemas/BasicUserRelationships'
        type:
          $ref: '#/components/schemas/IncidentIntegrationMetadataType'
      required:
      - id
      - type
      type: object
    IncidentIntegrationMetadataArray:
      description: An array of Incident integration metadata.
      items:
        $ref: '#/components/schemas/IncidentIntegrationMetadata'
      type: array
    IncidentIntegrationMetadataListResponse:
      description: Represents the JSON API Payload of a List of Incident integration
        metadata Items.
      properties:
        data:
          $ref: '#/components/schemas/IncidentIntegrationMetadataArray'
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentIntegrationMetadataRequest:
      description: JSON API request with an incident integration metadata payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentIntegrationMetadata'
      required:
      - data
      type: object
    IncidentIntegrationMetadataResponse:
      description: Represents the JSON API Payload of an Incident integration metadata
        Item.
      properties:
        data:
          $ref: '#/components/schemas/IncidentIntegrationMetadata'
      required:
      - data
      type: object
    IncidentIntegrationMetadataType:
      default: incident_integration_metadata
      description: Incident integration metadata resource type.
      enum:
      - incident_integration_metadata
      type: string
      x-enum-varnames:
      - incident_integration_metadata
    IncidentIntegrationMetadataTypeID:
      description: The integration type identifier.
      enum:
      - 0
      - 1
      - 2
      format: int32
      type: integer
      x-enum-varnames:
      - slack
      - zoom
      - pagerduty
    IncidentListResponse:
      description: Represents the JSON API Payload of a List of Incident Items.
      properties:
        data:
          $ref: '#/components/schemas/IncidentArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentPostmortem:
      description: Represents an Incident Postmortem Item.
      properties:
        attributes:
          description: The postmortem's attributes.
          properties:
            created:
              description: Timestamp of when an postmortem was created.
              format: date-time
              readOnly: true
              type: string
            created_by:
              description: The user who created this postmortem.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            deleted:
              description: Timestamp of when an postmortem was deleted.
              format: date-time
              readOnly: true
              type: string
            incident_id:
              description: ID of the incident for this postmortem.
              readOnly: true
              type: string
            last_modified_by:
              description: The user who most recently modified this postmortem.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            modified:
              description: Timestamp of when an postmortem was modified.
              format: date-time
              readOnly: true
              type: string
            owner:
              description: The user who owns this postmortem.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
          type: object
        id:
          description: The postmortem's ID.
          example: cbbe9e15d3bf55858eee5ffad3619798
          readOnly: true
          type: string
        relationships:
          description: JSON API relationships.
          properties:
            created_by_user:
              $ref: '#/components/schemas/UserRelationship'
            last_modified_by_user:
              $ref: '#/components/schemas/UserRelationship'
            owner_user:
              $ref: '#/components/schemas/UserRelationship'
            user_defined_field_selections:
              description: The selections which have been made for this postmortem's
                user-defined fields.
              properties:
                data:
                  description: The selection ID array.
                  items:
                    $ref: '#/components/schemas/UserDefinedFieldSelectionRelationship'
                  type: array
              type: object
            user_defined_fields:
              description: The user-defined fields which are defined for the postmortem
                table_id in the requesting user's organization.
              properties:
                data:
                  description: The field ID array.
                  items:
                    $ref: '#/components/schemas/UserDefinedFieldRelationship'
                  type: array
              type: object
          type: object
        type:
          $ref: '#/components/schemas/PostmortemType'
      required:
      - id
      - type
      type: object
    IncidentPostmortemArray:
      description: An Array of Postmortems.
      items:
        $ref: '#/components/schemas/IncidentPostmortem'
      type: array
    IncidentPostmortemIncludedItems:
      description: An object related to a postmortem which is included in the JSON
        API response.
      oneOf:
      - $ref: '#/components/schemas/User'
      - $ref: '#/components/schemas/UserDefinedField'
      - $ref: '#/components/schemas/UserDefinedFieldSelection'
      type: object
    IncidentPostmortemListResponse:
      description: JSON API response with a list of postmortem payloads.
      properties:
        data:
          $ref: '#/components/schemas/IncidentPostmortemArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentPostmortemIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentPostmortemRequest:
      description: JSON API request with a postmortem payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentPostmortem'
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/User'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentPostmortemResponse:
      description: JSON API response with a postmortem payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentPostmortem'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentPostmortemIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentRequest:
      description: JSON API request with a incident payload.
      properties:
        data:
          $ref: '#/components/schemas/Incident'
      required:
      - data
      type: object
    IncidentResponse:
      description: Represents the JSON API Payload of an Incident Item.
      properties:
        data:
          $ref: '#/components/schemas/Incident'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentResponseWithoutIncluded:
      description: Represents the JSON API Payload of an Incident Item.
      properties:
        data:
          $ref: '#/components/schemas/Incident'
      required:
      - data
      type: object
    IncidentSearch:
      description: Represents an Incident Search.
      properties:
        attributes:
          description: The Incident Search attributes.
          properties:
            facets:
              additionalProperties:
                $ref: '#/components/schemas/IncidentFacetSchema'
              description: A mapping of search facets by facet name.
              nullable: true
              readOnly: true
              type: object
            incidents:
              description: The matched incidents if any.
              items:
                $ref: '#/components/schemas/IncidentResponseWithoutIncluded'
              readOnly: true
              type: array
            total:
              description: The total count of matched incidents.
              format: int64
              readOnly: true
              type: integer
            type:
              $ref: '#/components/schemas/IncidentSearchType'
          type: object
      type: object
    IncidentSearchIncludedItems:
      description: An object related to search results which is included in the JSON
        API response.
      oneOf:
      - $ref: '#/components/schemas/Incident'
      type: object
    IncidentSearchResponse:
      description: Represents the JSON API Payload of a List of Incident Items.
      properties:
        data:
          $ref: '#/components/schemas/IncidentSearch'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentSearchIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentSearchType:
      default: incidents_search_results
      description: Incident search resource type.
      enum:
      - incidents_search_results
      type: string
      x-enum-varnames:
      - incidents_search_results
    IncidentTagKeyResults:
      description: A set of tag keys to be used in customized field definitions on
        incident management configuration.
      properties:
        attributes:
          description: The result set's attributes.
          properties:
            keys:
              description: The matched tag keys if any.
              items:
                description: Tag keys reported elsewhere in the platform.
                example: env
                type: string
              readOnly: true
              type: array
            query:
              description: The query used to search tag keys.
              example: datacenter
              type: string
            total:
              description: The total count of matched tag keys.
              format: int64
              readOnly: true
              type: integer
          type: object
        type:
          $ref: '#/components/schemas/IncidentTagKeyResultsType'
      required:
      - type
      type: object
    IncidentTagKeyResultsResponse:
      description: JSON API response with a tag key results payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTagKeyResults'
      required:
      - data
      type: object
    IncidentTagKeyResultsType:
      default: incident_tag_key_results
      description: Tag key results resource type.
      enum:
      - incident_tag_key_results
      type: string
      x-enum-varnames:
      - incident_tag_key_results
    IncidentTagValueResults:
      description: A set of tag values to be used in customized field selections.
      properties:
        attributes:
          description: The result set's attributes.
          properties:
            query:
              description: The query used to search tag values.
              example: example
              type: string
            total:
              description: The total count of matched tag values.
              format: int64
              readOnly: true
              type: integer
            values:
              description: The matched tag values if any.
              items:
                description: Tag values reported elsewhere in the platform.
                example: example_tag_value
                type: string
              readOnly: true
              type: array
          type: object
        type:
          $ref: '#/components/schemas/IncidentTagValueResultsType'
      required:
      - type
      type: object
    IncidentTagValueResultsResponse:
      description: JSON API response with a tag value results payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTagValueResults'
      required:
      - data
      type: object
    IncidentTagValueResultsType:
      default: incident_tag_value_results
      description: Tag value results resource type.
      enum:
      - incident_tag_value_results
      type: string
      x-enum-varnames:
      - incident_tag_value_results
    IncidentTimelineCell:
      description: JSON API Schema representation an Incident Timeline Cell.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTimelineCellAttributes'
        id:
          description: The timeline cell's ID.
          example: 6a4d57b26fed5e1d857d509914e8fa24
          readOnly: true
          type: string
        relationships:
          $ref: '#/components/schemas/BasicUserRelationships'
        type:
          $ref: '#/components/schemas/IncidentTimelineCellType'
      required:
      - id
      - type
      type: object
    IncidentTimelineCellActionType:
      description: Action that resulted in the creation of the timeline cell.
      enum:
      - created
      - updated
      - deleted
      example: created
      nullable: false
      type: string
      x-enum-varnames:
      - CREATED
      - UPDATED
      - DELETED
    IncidentTimelineCellArray:
      description: An array of Incident Timeline Cells.
      items:
        $ref: '#/components/schemas/IncidentTimelineCell'
      type: array
    IncidentTimelineCellAttributes:
      description: The timeline cell's attributes. This is used both as a payload
        return as well as can be used to initialize an incident.
      oneOf:
      - $ref: '#/components/schemas/IncidentTimelineCellMarkdownContent'
      - $ref: '#/components/schemas/IncidentTimelineCellStatusChangeContent'
      - $ref: '#/components/schemas/IncidentTimelineCellTodoChangeContent'
      - $ref: '#/components/schemas/IncidentTimelineCellIntegrationChangeContent'
      required:
      - cell_type
      type: object
    IncidentTimelineCellCreatedByUserEmbedded:
      description: An embedded JSON API object of the user who created this timeline
        cell.
      properties:
        data:
          $ref: '#/components/schemas/EmbeddedIncidentsUser'
      readOnly: true
      type: object
    IncidentTimelineCellIncludedItems:
      description: An object related to a user-defined field which is included in
        the JSON API response.
      oneOf:
      - $ref: '#/components/schemas/User'
      type: object
    IncidentTimelineCellIntegrationChangeContent:
      description: An integration change cell content schema.
      properties:
        cell_type:
          $ref: '#/components/schemas/IncidentTimelineCellIntegrationChangeContentType'
        content:
          description: The timeline cell content.
          properties:
            action:
              $ref: '#/components/schemas/IncidentTimelineCellActionType'
            after:
              $ref: '#/components/schemas/IncidentTimelineCellIntegrationChangeContentData'
            before:
              $ref: '#/components/schemas/IncidentTimelineCellIntegrationChangeContentData'
            current_state:
              description: The state of the incident at the time for which this cell
                appears.
              example: active
              nullable: false
              type: string
            integration_type:
              $ref: '#/components/schemas/IncidentTimelineCellIntegrationType'
          type: object
        created:
          description: Timestamp of when a cell was created.
          format: date-time
          readOnly: true
          type: string
        created_by:
          $ref: '#/components/schemas/IncidentTimelineCellCreatedByUserEmbedded'
        created_by_uuid:
          description: The ID of the user who created this timeline cell.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        deleted:
          description: Timestamp of when a cell was deleted.
          format: date-time
          readOnly: true
          type: string
        display_time:
          description: Timestamp of display time for a given cell. This is used to
            sort the timeline view.
          format: date-time
          readOnly: true
          type: string
        important:
          default: false
          description: A flag for whether the timeline cell should be highlighted.
          example: false
          type: boolean
        last_modified_by:
          $ref: '#/components/schemas/IncidentTimelineCellLastModifiedByUserEmbedded'
        last_modified_uuid:
          description: The ID of the user who last modified this timeline cell.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        modified:
          description: Timestamp of when a cell was modified.
          format: date-time
          readOnly: true
          type: string
        source:
          description: A string representing the source of the cell.
          example: datadog
          nullable: true
          type: string
      required:
      - content
      type: object
    IncidentTimelineCellIntegrationChangeContentData:
      description: Timeline cell integration content data comes in one of several
        types.
      oneOf:
      - $ref: '#/components/schemas/IncidentTimelineCellIntegrationChangeSlackContentData'
      - $ref: '#/components/schemas/IncidentTimelineCellIntegrationChangeZoomContentData'
      type: object
    IncidentTimelineCellIntegrationChangeContentType:
      default: incident_integration_change
      description: Type of timeline cell.
      enum:
      - incident_integration_change
      example: incident_integration_change
      type: string
      x-enum-varnames:
      - incident_integration_change
    IncidentTimelineCellIntegrationChangeSlackContentData:
      description: Slack Integration Change timeline cell content.
      properties:
        channels:
          description: Slack channels associated with the incident.
          items:
            description: Schema of the before and after fields of a slack integration
              change cell's content.
            properties:
              channel_id:
                description: Slack channel id.
                nullable: false
                type: string
              channel_name:
                description: Slack channel name.
                nullable: false
                type: string
              redirect_url:
                description: Slack channel link.
                nullable: false
                type: string
              team_id:
                description: Slack channel team id.
                nullable: false
                type: string
            type: object
          readOnly: true
          type: array
      type: object
    IncidentTimelineCellIntegrationChangeZoomContentData:
      description: Zoom Integration Change timeline cell content.
      properties:
        rooms:
          description: Zoom rooms associated with the incident.
          items:
            description: Schema of the before and after fields of a zoom integration
              change cell's content.
            properties:
              redirect_url:
                description: Zoom room link.
                nullable: false
                type: string
              room_id:
                description: Zoom room id.
                nullable: false
                type: string
              room_name:
                description: Zoom room name.
                nullable: false
                type: string
            type: object
          readOnly: true
          type: array
      type: object
    IncidentTimelineCellIntegrationType:
      description: Integration type.
      enum:
      - 1
      - 2
      example: 1
      nullable: false
      type: integer
      x-enum-varnames:
      - SLACK
      - ZOOM
    IncidentTimelineCellLastModifiedByUserEmbedded:
      description: An embedded JSON API object of the user who last modified this
        timeline cell.
      properties:
        data:
          $ref: '#/components/schemas/EmbeddedIncidentsUser'
      readOnly: true
      type: object
    IncidentTimelineCellListResponse:
      description: JSON API response with a list of timeline cell payloads.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTimelineCellArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentTimelineCellIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentTimelineCellMarkdownContent:
      description: A Markdown cell content schema.
      properties:
        cell_type:
          $ref: '#/components/schemas/IncidentTimelineCellMarkdownContentType'
        content:
          description: The markdown cell contents.
          properties:
            content:
              description: The markdown content of the cell.
              example: '{"key":"value"}'
              nullable: false
              type: string
            current_state:
              description: The state of the incident at the time for which this cell
                appears.
              example: active
              nullable: false
              type: string
          type: object
        created:
          description: Timestamp of when a cell was created.
          format: date-time
          readOnly: true
          type: string
        created_by:
          $ref: '#/components/schemas/IncidentTimelineCellCreatedByUserEmbedded'
        created_by_uuid:
          description: The ID of the user who created this timeline cell.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        deleted:
          description: Timestamp of when a cell was deleted.
          format: date-time
          readOnly: true
          type: string
        display_time:
          description: Timestamp of display time for a given cell. This is used to
            sort the timeline view.
          format: date-time
          readOnly: true
          type: string
        important:
          default: false
          description: A flag for whether the timeline cell should be highlighted.
          example: false
          type: boolean
        last_modified_by:
          $ref: '#/components/schemas/IncidentTimelineCellLastModifiedByUserEmbedded'
        last_modified_uuid:
          description: The ID of the user who last modified this timeline cell.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        modified:
          description: Timestamp of when a cell was modified.
          format: date-time
          readOnly: true
          type: string
        source:
          description: A string representing the source of the cell.
          example: slack
          nullable: true
          type: string
      required:
      - content
      type: object
    IncidentTimelineCellMarkdownContentType:
      default: markdown
      description: Type of the markdown timeline cell.
      enum:
      - markdown
      example: markdown
      type: string
      x-enum-varnames:
      - MARKDOWN
    IncidentTimelineCellRequest:
      description: JSON API request with a timeline cell payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTimelineCell'
      required:
      - data
      type: object
    IncidentTimelineCellResponse:
      description: JSON API response with a timeline cell payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTimelineCell'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentTimelineCellIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentTimelineCellStatusChangeContent:
      description: A Status Change cell content schema.
      properties:
        cell_type:
          $ref: '#/components/schemas/IncidentTimelineCellStatusChangeContentType'
        content:
          description: The status change cell content.
          properties:
            action:
              $ref: '#/components/schemas/IncidentTimelineCellActionType'
            after:
              $ref: '#/components/schemas/IncidentTimelineCellStatusChangeDiffContent'
            before:
              $ref: '#/components/schemas/IncidentTimelineCellStatusChangeDiffContent'
            current_state:
              description: The state of the incident at the time for which this cell
                appears.
              example: active
              nullable: false
              type: string
            status_type:
              description: A string representing the status change type.
              example: incident
              nullable: false
              type: string
          type: object
        created:
          description: Timestamp of when a cell was created.
          format: date-time
          readOnly: true
          type: string
        created_by:
          $ref: '#/components/schemas/IncidentTimelineCellCreatedByUserEmbedded'
        created_by_uuid:
          description: The ID of the user who created this timeline cell.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        deleted:
          description: Timestamp of when a cell was deleted.
          format: date-time
          readOnly: true
          type: string
        display_time:
          description: Timestamp of display time for a given cell. This is used to
            sort the timeline view.
          format: date-time
          readOnly: true
          type: string
        important:
          default: false
          description: A flag for whether the timeline cell should be highlighted.
          example: false
          type: boolean
        last_modified_by:
          $ref: '#/components/schemas/IncidentTimelineCellLastModifiedByUserEmbedded'
        last_modified_uuid:
          description: The ID of the user who last modified this timeline cell.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        modified:
          description: Timestamp of when a cell was modified.
          format: date-time
          readOnly: true
          type: string
        source:
          description: A string representing the source of the cell.
          example: slack
          nullable: true
          type: string
      required:
      - content
      type: object
    IncidentTimelineCellStatusChangeContentType:
      default: incident_status_change
      description: Type of the markdown timeline cell.
      enum:
      - incident_status_change
      example: incident_status_change
      type: string
      x-enum-varnames:
      - incident_status_change
    IncidentTimelineCellStatusChangeDiffContent:
      description: Schema of the before and after fields of a status change cell's
        content.
      properties:
        content:
          description: The content of the status change for the cell.
          nullable: false
          type: string
        customer_impact_end:
          description: Timestamp of when customers/users were no longer impacted by
            the incident.
          format: date-time
          nullable: true
          type: string
        customer_impact_scope:
          description: The scope at which customers were impacted.
          nullable: true
          type: string
        customer_impact_start:
          description: Timestamp of when customers/users were impacted by the incident.
          format: date-time
          nullable: true
          type: string
        customer_impacted:
          description: True if customers/users were impacted by the incident.
          nullable: true
          type: boolean
        detected:
          description: Timestamp of when an incident was detected.
          format: date-time
          nullable: true
          type: string
        resolved:
          description: Timestamp of when an incident was resolved.
          format: date-time
          nullable: true
          type: string
        selections:
          description: A snapshot of the current services.
          items:
            description: A user-defined field selection item.
            properties:
              choices:
                description: The associated user defined field.
                items:
                  properties:
                    name:
                      description: The choice name if available.
                      nullable: true
                      type: string
                    selection_id:
                      description: The selection id associated with the choice.
                      nullable: false
                      type: string
                    value:
                      description: The choice value, will be the override value if
                        no choice name is available.
                      nullable: false
                      type: string
                nullable: false
                type: array
              field:
                description: The associated user defined field.
                nullable: false
                properties:
                  id:
                    description: The field ID.
                    nullable: false
                    type: string
                  name:
                    description: The field name.
                    nullable: false
                    type: string
                  table_id:
                    description: The table ID for this field.
                    nullable: false
                    type: string
                type: object
            type: object
          nullable: true
          type: array
        services:
          description: A snapshot of the current services.
          items:
            description: A service object.
            properties:
              id:
                description: The service ID.
                nullable: false
                type: string
              name:
                description: The service name.
                nullable: false
                type: string
            type: object
          nullable: true
          type: array
        state:
          description: The current state if an incident.
          example: active
          nullable: true
          type: string
        teams:
          description: A snapshot of the current teams.
          items:
            description: A team object.
            properties:
              id:
                description: The team ID.
                nullable: false
                type: string
              name:
                description: The team name.
                nullable: false
                type: string
            type: object
          nullable: true
          type: array
        title:
          description: The title of the incident.
          nullable: true
          type: string
      type: object
    IncidentTimelineCellTodoChangeContent:
      description: A to-do change cell content schema.
      properties:
        cell_type:
          $ref: '#/components/schemas/IncidentTimelineCellTodoChangeContentType'
        content:
          description: The to-do change cell content.
          properties:
            action:
              $ref: '#/components/schemas/IncidentTimelineCellActionType'
            after:
              $ref: '#/components/schemas/IncidentTimelineCellTodoChangeContentData'
            before:
              $ref: '#/components/schemas/IncidentTimelineCellTodoChangeContentData'
            current_state:
              description: The state of the incident at the time for which this cell
                appears.
              example: active
              nullable: false
              type: string
          type: object
        created:
          description: Timestamp of when a cell was created.
          format: date-time
          readOnly: true
          type: string
        created_by:
          $ref: '#/components/schemas/IncidentTimelineCellCreatedByUserEmbedded'
        created_by_uuid:
          description: The ID of the user who created this timeline cell.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        deleted:
          description: Timestamp of when a cell was deleted.
          format: date-time
          readOnly: true
          type: string
        display_time:
          description: Timestamp of display time for a given cell. This is used to
            sort the timeline view.
          format: date-time
          readOnly: true
          type: string
        important:
          default: false
          description: A flag for whether the timeline cell should be highlighted.
          example: false
          type: boolean
        last_modified_by:
          $ref: '#/components/schemas/IncidentTimelineCellLastModifiedByUserEmbedded'
        last_modified_uuid:
          description: The ID of the user who last modified this timeline cell.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        modified:
          description: Timestamp of when a cell was modified.
          format: date-time
          readOnly: true
          type: string
        source:
          description: A string representing the source of the cell.
          example: slack
          nullable: true
          type: string
      required:
      - content
      type: object
    IncidentTimelineCellTodoChangeContentData:
      description: Schema of the before and after fields of a to-do change cell's
        content.
      properties:
        completed:
          description: The to-do completed timestamp.
          format: date-time
          nullable: false
          type: string
        content:
          description: The to-do content.
          nullable: false
          type: string
        id:
          description: The to-do id.
          example: 073388a00b8c5f31b6ebd2cad86d05c3
          nullable: false
          type: string
      type: object
    IncidentTimelineCellTodoChangeContentType:
      default: incident_todo_change
      description: Type of the markdown timeline cell.
      enum:
      - incident_todo_change
      example: incident_todo_change
      type: string
      x-enum-varnames:
      - incident_todo_change
    IncidentTimelineCellType:
      default: incident_timeline_cells
      description: Timeline cell resource type.
      enum:
      - incident_timeline_cells
      type: string
      x-enum-varnames:
      - incident_timeline_cells
    IncidentToDoIncludedItems:
      description: An object related to an incident to-do which is included in the
        JSON API response.
      oneOf:
      - $ref: '#/components/schemas/User'
      type: object
    IncidentToDoType:
      default: incident_todos
      description: Incident to-do resource type.
      enum:
      - incident_todos
      type: string
      x-enum-varnames:
      - incident_todos
    IncidentTodo:
      description: A to-do task which needs to be finished for an incident.
      properties:
        attributes:
          description: The to-do's attributes.
          properties:
            completed:
              description: Timestamp of when the to-do was marked completed.
              format: date-time
              nullable: true
              type: string
            content:
              description: A string describing the task to be done.
              type: string
            created:
              description: Timestamp of when the to-do was created.
              format: date-time
              readOnly: true
              type: string
            created_by:
              description: An embedded JSON API object of the user who created this
                to-do.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            created_by_uuid:
              description: The ID of the user who created this to-do.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            incident_id:
              description: The ID of the incident to which this to-do is attached.
              readOnly: true
              type: string
            last_modified_by:
              description: An embedded JSON API object of the user who last modified
                this to-do.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            last_modified_uuid:
              description: The ID of the user who last modified this to-do.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            modified:
              description: Timestamp of when the to-do was modified.
              format: date-time
              readOnly: true
              type: string
          type: object
        id:
          description: The to-do's ID.
          example: 03ad14ee08b05416bfa59740198d7ebd
          readOnly: true
          type: string
        relationships:
          $ref: '#/components/schemas/BasicUserRelationships'
        type:
          $ref: '#/components/schemas/IncidentToDoType'
      required:
      - id
      - type
      type: object
    IncidentTodoArray:
      description: The Incident to-dos.
      items:
        $ref: '#/components/schemas/IncidentTodo'
      type: array
    IncidentTodoListResponse:
      description: Represents the JSON API Payload of a List of Incident to-do Items.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTodoArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentToDoIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentTodoRequest:
      description: JSON API request with an incident to-do payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTodo'
      required:
      - data
      type: object
    IncidentTodoResponse:
      description: Represents the JSON API Payload of an Incident to-do Item.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTodo'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/IncidentToDoIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentType:
      default: incidents
      description: Incident resource type.
      enum:
      - incidents
      type: string
      x-enum-varnames:
      - incidents
    Log:
      description: Object description of a log after being processed and stored by
        Datadog.
      properties:
        attributes:
          description: JSON object containing all log attributes and their associated
            values.
          properties:
            attributes:
              additionalProperties: {}
              description: JSON object of attributes from your log.
              example:
                customAttribute: 123
                duration: 2345
              type: object
            host:
              description: Name of the machine from where the logs are being sent.
              example: i-0123
              type: string
            message:
              description: 'The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)

                of your log. By default, Datadog ingests the value of the message
                attribute as the body of the log entry.

                That value is then highlighted and displayed in the Logstream, where
                it is indexed for full text search.'
              example: Host connected to remote
              type: string
            service:
              description: 'The name of the application or service generating the
                log events.

                It is used to switch from Logs to APM, so make sure you define the
                same

                value when you use both products.'
              example: agent
              type: string
            status:
              description: Status of the message associated with your log.
              example: INFO
              type: string
            tags:
              description: Array of tags associated with your log.
              example:
              - team:A
              format: array
              items:
                description: Tag associated with your log.
                format: string
            timestamp:
              description: Timestamp of your log.
              example: '2019-01-02T09:42:36.320Z'
              format: date-time
              type: string
          type: object
        id:
          description: Unique ID of the Log.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/LogType'
      type: object
    LogType:
      default: log
      description: Type of the event.
      enum:
      - log
      example: log
      type: string
      x-enum-varnames:
      - LOG
    LogsAggregateBucket:
      description: A bucket values
      properties:
        by:
          additionalProperties:
            description: The values for each group by
            type: string
          description: The key, value pairs for each group by
          example:
            '@state': success
            '@version': abc
          type: object
        computes:
          additionalProperties:
            $ref: '#/components/schemas/LogsAggregateBucketValue'
          description: A map of the metric name -> value for regular compute or list
            of values for a timeseries
          type: object
      type: object
    LogsAggregateBucketValue:
      description: A bucket value, can be either a timeseries or a single value
      oneOf:
      - $ref: '#/components/schemas/LogsAggregateBucketValueSingleString'
      - $ref: '#/components/schemas/LogsAggregateBucketValueSingleNumber'
      - $ref: '#/components/schemas/LogsAggregateBucketValueTimeseries'
    LogsAggregateBucketValueSingleNumber:
      description: A single number value
      format: double
      type: number
    LogsAggregateBucketValueSingleString:
      description: A single string value
      type: string
    LogsAggregateBucketValueTimeseries:
      description: A timeseries array
      items:
        $ref: '#/components/schemas/LogsAggregateBucketValueTimeseriesPoint'
      type: array
      x-generate-alias-as-model: true
    LogsAggregateBucketValueTimeseriesPoint:
      description: A timeseries point
      properties:
        time:
          description: The time value for this point
          example: '2020-06-08T11:55:00Z'
          type: string
        value:
          description: The value for this point
          example: 19
          format: double
          type: number
      type: object
    LogsAggregateRequest:
      description: The object sent with the request to retrieve a list of logs from
        your organization.
      properties:
        compute:
          description: The list of metrics or timeseries to compute for the retrieved
            buckets.
          items:
            $ref: '#/components/schemas/LogsCompute'
          type: array
        filter:
          $ref: '#/components/schemas/LogsQueryFilter'
        group_by:
          description: The rules for the group by
          items:
            $ref: '#/components/schemas/LogsGroupBy'
          type: array
        options:
          $ref: '#/components/schemas/LogsQueryOptions'
        paging:
          description: Paging settings
          properties:
            after:
              description: The returned paging point to use to get the next results
              example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
              type: string
          type: object
      type: object
    LogsAggregateResponse:
      description: The response object for the logs aggregate API endpoint
      properties:
        data:
          description: The query results
          properties:
            buckets:
              description: The list of matching buckets, one item per bucket
              items:
                $ref: '#/components/schemas/LogsAggregateBucket'
              type: array
          type: object
        meta:
          $ref: '#/components/schemas/LogsResponseMetadata'
      type: object
    LogsAggregateResponseStatus:
      description: The status of the response
      enum:
      - done
      - timeout
      example: done
      type: string
      x-enum-varnames:
      - DONE
      - TIMEOUT
    LogsAggregateSort:
      description: A sort rule
      example:
        aggregation: count
        order: asc
      properties:
        aggregation:
          $ref: '#/components/schemas/LogsAggregationFunction'
        metric:
          description: The metric to sort by (only used for type=metric)
          example: '@duration'
          type: string
        order:
          $ref: '#/components/schemas/LogsSortOrder'
        type:
          $ref: '#/components/schemas/LogsAggregateSortType'
      type: object
    LogsAggregateSortType:
      default: alphabetical
      description: The type of sorting algorithm
      enum:
      - alphabetical
      - measure
      type: string
      x-enum-varnames:
      - ALPHABETICAL
      - MEASURE
    LogsAggregationFunction:
      description: An aggregation function
      enum:
      - count
      - cardinality
      - pc75
      - pc90
      - pc95
      - pc98
      - pc99
      - sum
      - min
      - max
      - avg
      example: pc90
      type: string
      x-enum-varnames:
      - COUNT
      - CARDINALITY
      - PERCENTILE_75
      - PERCENTILE_90
      - PERCENTILE_95
      - PERCENTILE_98
      - PERCENTILE_99
      - SUM
      - MIN
      - MAX
      - AVG
    LogsArchive:
      description: The logs archive.
      properties:
        data:
          $ref: '#/components/schemas/LogsArchiveDefinition'
      type: object
    LogsArchiveAttributes:
      description: The attributes associated with the archive.
      properties:
        destination:
          $ref: '#/components/schemas/LogsArchiveDestination'
        name:
          description: The archive name.
          example: Nginx Archive
          type: string
        query:
          description: The archive query/filter. Logs matching this query are included
            in the archive.
          example: source:nginx
          type: string
        state:
          $ref: '#/components/schemas/LogsArchiveState'
      required:
      - name
      - query
      - destination
      type: object
    LogsArchiveCreateRequest:
      description: The logs archive.
      properties:
        data:
          $ref: '#/components/schemas/LogsArchiveCreateRequestDefinition'
      type: object
    LogsArchiveCreateRequestAttributes:
      description: The attributes associated with the archive.
      properties:
        destination:
          $ref: '#/components/schemas/LogsArchiveCreateRequestDestination'
        name:
          description: The archive name.
          example: Nginx Archive
          type: string
        query:
          description: The archive query/filter. Logs matching this query are included
            in the archive.
          example: source:nginx
          type: string
      required:
      - name
      - query
      - destination
      type: object
    LogsArchiveCreateRequestDefinition:
      description: The definition of an archive.
      properties:
        attributes:
          $ref: '#/components/schemas/LogsArchiveCreateRequestAttributes'
        type:
          default: archives
          description: The type of the resource. The value should always be archives.
          example: archives
          type: string
      required:
      - type
      type: object
    LogsArchiveCreateRequestDestination:
      description: An archive's destination.
      oneOf:
      - $ref: '#/components/schemas/LogsArchiveDestinationAzure'
      - $ref: '#/components/schemas/LogsArchiveDestinationGCS'
      - $ref: '#/components/schemas/LogsArchiveDestinationS3'
      required:
      - type
      - integration
      type: object
    LogsArchiveDefinition:
      description: The definition of an archive.
      properties:
        attributes:
          $ref: '#/components/schemas/LogsArchiveAttributes'
        id:
          description: The archive ID.
          example: a2zcMylnM4OCHpYusxIi3g
          readOnly: true
          type: string
        type:
          default: archives
          description: The type of the resource. The value should always be archives.
          example: archives
          readOnly: true
          type: string
      required:
      - type
      type: object
    LogsArchiveDestination:
      description: An archive's destination.
      nullable: true
      oneOf:
      - $ref: '#/components/schemas/LogsArchiveDestinationAzure'
      - $ref: '#/components/schemas/LogsArchiveDestinationGCS'
      - $ref: '#/components/schemas/LogsArchiveDestinationS3'
      required:
      - type
      - integration
      type: object
    LogsArchiveDestinationAzure:
      description: The Azure archive destination.
      properties:
        container:
          description: The container where the archive will be stored.
          example: container-name
          type: string
        integration:
          $ref: '#/components/schemas/LogsArchiveIntegrationAzure'
        path:
          description: The archive path.
          type: string
        region:
          description: The region where the archive will be stored.
          type: string
        storage_account:
          description: The associated storage account.
          example: account-name
          type: string
        type:
          $ref: '#/components/schemas/LogsArchiveDestinationAzureType'
      required:
      - storage_account
      - container
      - integration
      - type
      type: object
    LogsArchiveDestinationAzureType:
      default: azure
      description: Type of the Azure archive destination.
      enum:
      - azure
      example: azure
      type: string
      x-enum-varnames:
      - AZURE
    LogsArchiveDestinationGCS:
      description: The GCS archive destination.
      properties:
        bucket:
          description: The bucket where the archive will be stored.
          example: bucket-name
          type: string
        integration:
          $ref: '#/components/schemas/LogsArchiveIntegrationGCS'
        path:
          description: The archive path.
          type: string
        type:
          $ref: '#/components/schemas/LogsArchiveDestinationGCSType'
      required:
      - bucket
      - integration
      - type
      type: object
    LogsArchiveDestinationGCSType:
      default: gcs
      description: Type of the GCS archive destination.
      enum:
      - gcs
      example: gcs
      type: string
      x-enum-varnames:
      - GCS
    LogsArchiveDestinationS3:
      description: The S3 archive destination.
      properties:
        bucket:
          description: The bucket where the archive will be stored.
          example: bucket-name
          type: string
        integration:
          $ref: '#/components/schemas/LogsArchiveIntegrationS3'
        path:
          description: The archive path.
          type: string
        type:
          $ref: '#/components/schemas/LogsArchiveDestinationS3Type'
      required:
      - bucket
      - integration
      - type
      type: object
    LogsArchiveDestinationS3Type:
      default: s3
      description: Type of the S3 archive destination.
      enum:
      - s3
      example: s3
      type: string
      x-enum-varnames:
      - S3
    LogsArchiveIntegrationAzure:
      description: The Azure archive's integration destination.
      properties:
        client_id:
          description: A client ID.
          example: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
          type: string
        tenant_id:
          description: A tenant ID.
          example: aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa
          type: string
      required:
      - tenant_id
      - client_id
      type: object
    LogsArchiveIntegrationGCS:
      description: The GCS archive's integration destination.
      properties:
        client_email:
          description: A client email.
          example: youremail@example.com
          type: string
        project_id:
          description: A project ID.
          example: project-id
          type: string
      required:
      - project_id
      - client_email
      type: object
    LogsArchiveIntegrationS3:
      description: The S3 Archive's integration destination.
      properties:
        account_id:
          description: The account ID for the integration.
          example: '123456789012'
          type: string
        role_name:
          description: The path of the integration.
          example: role-name
          type: string
      required:
      - role_name
      - account_id
      type: object
    LogsArchiveState:
      description: The state of the archive.
      enum:
      - UNKNOWN
      - WORKING
      - FAILING
      - WORKING_AUTH_LEGACY
      example: WORKING
      type: string
      x-enum-varnames:
      - UNKNOWN
      - WORKING
      - FAILING
      - WORKING_AUTH_LEGACY
    LogsArchives:
      description: The available archives.
      properties:
        data:
          description: A list of archives.
          items:
            $ref: '#/components/schemas/LogsArchiveDefinition'
          type: array
      type: object
    LogsCompute:
      description: A compute rule to compute metrics or timeseries
      properties:
        aggregation:
          $ref: '#/components/schemas/LogsAggregationFunction'
        interval:
          description: 'The time buckets'' size (only used for type=timeseries)

            Defaults to a resolution of 150 points'
          example: 5m
          type: string
        metric:
          description: The metric to use
          example: '@duration'
          type: string
        type:
          $ref: '#/components/schemas/LogsComputeType'
      required:
      - aggregation
      type: object
    LogsComputeType:
      default: total
      description: The type of compute
      enum:
      - timeseries
      - total
      type: string
      x-enum-varnames:
      - TIMESERIES
      - TOTAL
    LogsGroupBy:
      description: A group by rule
      properties:
        facet:
          description: The name of the facet to use (required)
          example: host
          type: string
        histogram:
          description: 'Used to perform a histogram computation (only for measure
            facets).

            Note: At most 100 buckets are allowed, the number of buckets is (max -
            min)/interval.'
          properties:
            interval:
              description: The bin size of the histogram buckets
              example: 10
              format: double
              type: number
            max:
              description: 'The maximum value for the measure used in the histogram

                (values greater than this one are filtered out)'
              example: 100
              format: double
              type: number
            min:
              description: 'The minimum value for the measure used in the histogram

                (values smaller than this one are filtered out)'
              example: 50
              format: double
              type: number
          required:
          - interval
          - min
          - max
          type: object
        limit:
          default: 10
          description: The maximum buckets to return for this group by
          type: integer
        missing:
          $ref: '#/components/schemas/LogsGroupByMissing'
        sort:
          $ref: '#/components/schemas/LogsAggregateSort'
        total:
          $ref: '#/components/schemas/LogsGroupByTotal'
      required:
      - facet
      type: object
    LogsGroupByMissing:
      description: The value to use for logs that don't have the facet used to group
        by
      oneOf:
      - $ref: '#/components/schemas/LogsGroupByMissingString'
      - $ref: '#/components/schemas/LogsGroupByMissingNumber'
    LogsGroupByMissingNumber:
      description: The missing value to use if there is a number valued facet.
      format: double
      type: number
    LogsGroupByMissingString:
      description: The missing value to use if there is string valued facet.
      type: string
    LogsGroupByTotal:
      default: false
      description: A resulting object to put the given computes in over all the matching
        records.
      oneOf:
      - $ref: '#/components/schemas/LogsGroupByTotalBoolean'
      - $ref: '#/components/schemas/LogsGroupByTotalString'
      - $ref: '#/components/schemas/LogsGroupByTotalNumber'
    LogsGroupByTotalBoolean:
      description: If set to true, creates an additional bucket labeled "$facet_total"
      type: boolean
    LogsGroupByTotalNumber:
      description: A number to use as the key value for the total bucket
      format: double
      type: number
    LogsGroupByTotalString:
      description: A string to use as the key value for the total bucket
      type: string
    LogsListRequest:
      description: The request for a logs list.
      properties:
        filter:
          $ref: '#/components/schemas/LogsQueryFilter'
        options:
          $ref: '#/components/schemas/LogsQueryOptions'
        page:
          description: Paging attributes for listing logs.
          properties:
            cursor:
              description: List following results with a cursor provided in the previous
                query.
              example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
              type: string
            limit:
              default: 10
              description: Maximum number of logs in the response.
              example: 25
              format: int32
              maximum: 1000
              type: integer
          type: object
        sort:
          $ref: '#/components/schemas/LogsSort'
      type: object
    LogsListResponse:
      description: Response object with all logs matching the request and pagination
        information.
      properties:
        data:
          description: Array of logs matching the request.
          items:
            $ref: '#/components/schemas/Log'
          type: array
        links:
          description: Links attributes.
          properties:
            next:
              description: 'Link for the next set of results. Note that the request
                can also be made using the

                POST endpoint.'
              example: https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
              type: string
          type: object
        meta:
          $ref: '#/components/schemas/LogsResponseMetadata'
      type: object
    LogsQueryFilter:
      description: The search and filter query settings
      properties:
        from:
          default: now-15m
          description: The minimum time for the requested logs, supports date math
            and regular timestamps
          example: now-15m
          type: string
        indexes:
          default:
          - '*'
          description: For customers with multiple indexes, the indexes to search.
            Defaults to ['*'] which means all indexes.
          example:
          - main
          - web
          items:
            description: The name of a log index.
            type: string
          type: array
        query:
          default: '*'
          description: The search query - following the log search syntax.
          example: service:web* AND @http.status_code:[200 TO 299]
          type: string
        to:
          default: now
          description: The maximum time for the requested logs, supports date math
            and regular timestamps
          example: now
          type: string
      type: object
    LogsQueryOptions:
      description: 'Global query options that are used during the query.

        Note: You should only supply timezone or time offset but not both otherwise
        the query will fail.'
      properties:
        timeOffset:
          description: The time offset (in seconds) to apply to the query.
          type: integer
        timezone:
          default: UTC
          description: 'The timezone can be specified both as an offset, for example:
            "UTC+03:00".'
          example: GMT
          type: string
      type: object
    LogsResponseMetadata:
      description: The metadata associated with a request
      properties:
        elapsed:
          description: The time elapsed in milliseconds
          example: 132
          type: integer
        page:
          description: Paging attributes.
          properties:
            after:
              description: 'The cursor to use to get the next results, if any. To
                make the next request, use the same.

                parameters with the addition of the `page[cursor]`.'
              example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
              type: string
          type: object
        request_id:
          description: The identifier of the request
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          $ref: '#/components/schemas/LogsAggregateResponseStatus'
        warnings:
          description: 'A list of warnings (non fatal errors) encountered, partial
            results might be returned if

            warnings are present in the response.'
          items:
            $ref: '#/components/schemas/LogsWarning'
          type: array
      type: object
    LogsRestrictionQueriesType:
      default: logs_restriction_queries
      description: Restriction query resource type.
      enum:
      - logs_restriction_queries
      example: logs_restriction_queries
      type: string
      x-enum-varnames:
      - LOGS_RESTRICTION_QUERIES
    LogsSort:
      description: Sort parameters when querying logs.
      enum:
      - timestamp
      - -timestamp
      type: string
      x-enum-varnames:
      - TIMESTAMP_ASCENDING
      - TIMESTAMP_DESCENDING
    LogsSortOrder:
      description: The order to use, ascending or descending
      enum:
      - asc
      - desc
      example: asc
      type: string
      x-enum-varnames:
      - ASCENDING
      - DESCENDING
    LogsWarning:
      description: A warning message indicating something that went wrong with the
        query
      properties:
        code:
          description: A unique code for this type of warning
          example: unknown_index
          type: string
        detail:
          description: A detailed explanation of this specific warning
          example: 'indexes: foo, bar'
          type: string
        title:
          description: A short human-readable summary of the warning
          example: One or several indexes are missing or invalid, results hold data
            from the other indexes
          type: string
      type: object
    Organization:
      description: Organization object.
      properties:
        attributes:
          $ref: '#/components/schemas/OrganizationAttributes'
        id:
          description: ID of the organization.
          type: string
        type:
          $ref: '#/components/schemas/OrganizationsType'
      required:
      - type
      type: object
    OrganizationAttributes:
      description: Attributes of the organization.
      properties:
        created_at:
          description: Creation time of the organization.
          format: date-time
          type: string
        description:
          description: Description of the organization.
          type: string
        disabled:
          description: Whether or not the organization is disabled.
          type: boolean
        modified_at:
          description: Time of last organization modification.
          format: date-time
          type: string
        name:
          description: Name of the organization.
          type: string
        public_id:
          description: Public ID of the organization.
          type: string
        sharing:
          description: Sharing type of the organization.
          type: string
        url:
          description: URL of the site that this organization exists at.
          type: string
      type: object
    OrganizationsType:
      default: orgs
      description: Organizations resource type.
      enum:
      - orgs
      example: orgs
      type: string
      x-enum-varnames:
      - ORGS
    Pagination:
      description: Pagination object.
      properties:
        total_count:
          description: Total count.
          format: int64
          type: integer
        total_filtered_count:
          description: Total count of elements matched by the filter.
          format: int64
          type: integer
      type: object
    PercentilesIncidentFacetType:
      default: aggregation_percentiles
      description: Type of the percentiles aggregation facet.
      enum:
      - aggregation_percentiles
      example: aggregation_percentiles
      type: string
      x-enum-varnames:
      - aggregation_percentiles
    Permission:
      description: Permission object.
      properties:
        attributes:
          $ref: '#/components/schemas/PermissionAttributes'
        id:
          description: ID of the permission.
          type: string
        type:
          $ref: '#/components/schemas/PermissionsType'
      required:
      - type
      type: object
    PermissionAttributes:
      description: Attributes of a permission.
      properties:
        created:
          description: Creation time of the permission.
          format: date-time
          type: string
        description:
          description: Description of the permission.
          type: string
        display_name:
          description: Displayed name for the permission.
          type: string
        display_type:
          description: Display type.
          type: string
        group_name:
          description: Name of the permission group.
          type: string
        name:
          description: Name of the permission.
          type: string
        restricted:
          description: Whether or not the permission is restricted.
          type: boolean
      type: object
    PermissionsResponse:
      description: Payload with API-returned permissions.
      properties:
        data:
          description: Array of permissions.
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    PermissionsType:
      default: permissions
      description: Permissions resource type.
      enum:
      - permissions
      example: permissions
      type: string
      x-enum-varnames:
      - PERMISSIONS
    PostmortemType:
      default: incident_postmortems
      description: Incident postmortem resource type.
      enum:
      - incident_postmortems
      type: string
      x-enum-varnames:
      - incident_postmortems
    QueryMetadata:
      description: The query metadata containing pagination metadata.
      properties:
        pagination:
          description: Pagination properties.
          properties:
            next_number:
              description: the next page to retrieve the next set of data
              example: 1000
              format: int64
              type: integer
            number:
              description: the index of the first element in the results
              example: 10
              format: int64
              type: integer
            size:
              description: maximum size of pages to return
              example: 1000
              format: int64
              type: integer
          type: object
      readOnly: true
      type: object
    QuerySortOrder:
      default: desc
      description: Direction of sort.
      enum:
      - asc
      - desc
      type: string
      x-enum-varnames:
      - ASC
      - DESC
    RelationshipToOrganization:
      description: Relationship to an organization.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToOrganizationData'
      type: object
    RelationshipToOrganizationData:
      description: Relationship to organization object.
      properties:
        id:
          description: ID of the organization.
          type: string
        type:
          $ref: '#/components/schemas/OrganizationsType'
      type: object
    RelationshipToOrganizations:
      description: Relationship to organizations.
      properties:
        data:
          description: Relationships to organization objects.
          items:
            $ref: '#/components/schemas/RelationshipToOrganizationData'
          type: array
      type: object
    RelationshipToPermission:
      description: Relationship to a permissions object.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToPermissionData'
      type: object
    RelationshipToPermissionData:
      description: Relationship to permission object.
      properties:
        id:
          description: ID of the permission.
          type: string
        type:
          $ref: '#/components/schemas/PermissionsType'
      type: object
    RelationshipToPermissions:
      description: Relationship to multiple permissions objects.
      properties:
        data:
          description: Relationships to permission objects.
          items:
            $ref: '#/components/schemas/RelationshipToPermissionData'
          type: array
      type: object
    RelationshipToRole:
      description: Relationship to role.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToRoleData'
      type: object
    RelationshipToRoleData:
      description: Relationship to role object.
      properties:
        id:
          description: ID of the role.
          example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          type: string
        type:
          $ref: '#/components/schemas/RolesType'
      type: object
    RelationshipToRoles:
      description: Relationship to roles.
      properties:
        data:
          description: An array containing type and ID of a role.
          items:
            $ref: '#/components/schemas/RelationshipToRoleData'
          type: array
      type: object
    RelationshipToUser:
      description: Relationship to user.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToUserData'
      type: object
    RelationshipToUserData:
      description: Relationship to user object.
      properties:
        id:
          description: ID of the user.
          type: string
        type:
          default: users
          description: Users type.
          readOnly: true
          type: string
      type: object
    RelationshipToUsers:
      description: Relationship to users.
      properties:
        data:
          description: Relationships to user objects.
          items:
            $ref: '#/components/schemas/RelationshipToUserData'
          type: array
      type: object
    ResponseMetaAttributes:
      description: Object describing meta attributes of response.
      properties:
        page:
          $ref: '#/components/schemas/Pagination'
      type: object
    RestrictionQueryAttributes:
      description: Attributes of the restriction query.
      properties:
        created_at:
          description: Creation time of the restriction query.
          example: '2020-03-17T21:06:44Z'
          format: date-time
          readOnly: true
          type: string
        modified_at:
          description: Time of last restriction query modification.
          example: '2020-03-17T21:15:15Z'
          format: date-time
          readOnly: true
          type: string
        restriction_query:
          description: The query that defines the restriction. Only the content matching
            the query can be returned.
          example: env:sandbox
          type: string
      type: object
    RestrictionQueryCreateAttributes:
      description: Attributes of the created restriction query.
      properties:
        restriction_query:
          description: The restriction query.
          example: env:sandbox
          type: string
      type: object
    RestrictionQueryCreateData:
      description: Data related to the creation of a restriction query.
      properties:
        attributes:
          $ref: '#/components/schemas/RestrictionQueryCreateAttributes'
        type:
          $ref: '#/components/schemas/LogsRestrictionQueriesType'
      type: object
    RestrictionQueryCreatePayload:
      description: Create a restriction query.
      properties:
        data:
          $ref: '#/components/schemas/RestrictionQueryCreateData'
      type: object
    RestrictionQueryListResponse:
      description: Response containing information about multiple restriction queries.
      properties:
        data:
          description: Array of returned restriction queries.
          items:
            $ref: '#/components/schemas/RestrictionQueryWithoutRelationships'
          type: array
      type: object
    RestrictionQueryRelationships:
      description: Relationships of the restriction query object.
      properties:
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    RestrictionQueryResponseIncludedItem:
      description: An object related to a restriction query.
      discriminator:
        mapping:
          roles: '#/components/schemas/RestrictionQueryRole'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/RestrictionQueryRole'
      type: object
    RestrictionQueryRole:
      description: Partial role object.
      properties:
        attributes:
          $ref: '#/components/schemas/RestrictionQueryRoleAttribute'
        id:
          description: ID of the role.
          example: <ROLE_ID>
          type: string
        type:
          default: roles
          description: Role resource type.
          example: roles
          readOnly: true
          type: string
      type: object
    RestrictionQueryRoleAttribute:
      description: Attributes of the role for a restriction query.
      properties:
        name:
          description: The role name.
          example: Datadog Admin Role
          type: string
      type: object
    RestrictionQueryRolesResponse:
      description: Response containing information about roles attached to a restriction
        query.
      properties:
        data:
          description: Array of roles.
          items:
            $ref: '#/components/schemas/RestrictionQueryRole'
          type: array
      type: object
    RestrictionQueryUpdateAttributes:
      description: Attributes of the edited restriction query.
      properties:
        restriction_query:
          description: The restriction query.
          example: env:sandbox
          type: string
      type: object
    RestrictionQueryUpdateData:
      description: Data related to the update of a restriction query.
      properties:
        attributes:
          $ref: '#/components/schemas/RestrictionQueryUpdateAttributes'
        type:
          $ref: '#/components/schemas/LogsRestrictionQueriesType'
      type: object
    RestrictionQueryUpdatePayload:
      description: Update a restriction query.
      properties:
        data:
          $ref: '#/components/schemas/RestrictionQueryUpdateData'
      type: object
    RestrictionQueryWithRelationships:
      description: Restriction query object returned by the API.
      properties:
        attributes:
          $ref: '#/components/schemas/RestrictionQueryAttributes'
        id:
          description: ID of the restriction query.
          example: 79a0e60a-644a-11ea-ad29-43329f7f58b5
          type: string
        relationships:
          $ref: '#/components/schemas/RestrictionQueryRelationships'
        type:
          $ref: '#/components/schemas/LogsRestrictionQueriesType'
      type: object
    RestrictionQueryWithRelationshipsResponse:
      description: Response containing information about a single restriction query.
      properties:
        data:
          $ref: '#/components/schemas/RestrictionQueryWithRelationships'
        included:
          description: Array of objects related to the restriction query.
          items:
            $ref: '#/components/schemas/RestrictionQueryResponseIncludedItem'
          type: array
      type: object
    RestrictionQueryWithoutRelationships:
      description: Restriction query object returned by the API.
      properties:
        attributes:
          $ref: '#/components/schemas/RestrictionQueryAttributes'
        id:
          description: ID of the restriction query.
          example: 79a0e60a-644a-11ea-ad29-43329f7f58b5
          type: string
        type:
          default: logs_restriction_queries
          description: Restriction queries type.
          example: logs_restriction_queries
          readOnly: true
          type: string
      type: object
    RestrictionQueryWithoutRelationshipsResponse:
      description: Response containing information about a single restriction query.
      properties:
        data:
          $ref: '#/components/schemas/RestrictionQueryWithoutRelationships'
      type: object
    Role:
      description: Role object returned by the API.
      properties:
        attributes:
          $ref: '#/components/schemas/RoleAttributes'
        id:
          description: ID of the role.
          type: string
        relationships:
          $ref: '#/components/schemas/RoleResponseRelationships'
        type:
          $ref: '#/components/schemas/RolesType'
      required:
      - type
      type: object
    RoleAttributes:
      description: Attributes of the role.
      properties:
        created_at:
          description: Creation time of the role.
          format: date-time
          readOnly: true
          type: string
        modified_at:
          description: Time of last role modification.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the role.
          type: string
        user_count:
          description: Number of users with that role.
          format: int64
          readOnly: true
          type: integer
      type: object
    RoleCreateAttributes:
      description: Attributes of the created role.
      properties:
        created_at:
          description: Creation time of the role.
          format: date-time
          readOnly: true
          type: string
        modified_at:
          description: Time of last role modification.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the role.
          type: string
      type: object
    RoleCreateData:
      description: Data related to the creation of a role.
      properties:
        attributes:
          $ref: '#/components/schemas/RoleCreateAttributes'
        relationships:
          $ref: '#/components/schemas/RoleRelationships'
        type:
          $ref: '#/components/schemas/RolesType'
      type: object
    RoleCreateRequest:
      description: Create a role.
      properties:
        data:
          $ref: '#/components/schemas/RoleCreateData'
      type: object
    RoleCreateResponse:
      description: Response containing information about a created role.
      properties:
        data:
          description: Role object returned by the API.
          properties:
            attributes:
              $ref: '#/components/schemas/RoleCreateAttributes'
            id:
              description: ID of the role.
              type: string
            relationships:
              $ref: '#/components/schemas/RoleResponseRelationships'
            type:
              $ref: '#/components/schemas/RolesType'
          required:
          - type
          type: object
      type: object
    RoleRelationships:
      description: Relationships of the role object.
      properties:
        permissions:
          $ref: '#/components/schemas/RelationshipToPermissions'
        users:
          $ref: '#/components/schemas/RelationshipToUsers'
      type: object
    RoleResponse:
      description: Response containing information about a single role.
      properties:
        data:
          $ref: '#/components/schemas/Role'
      type: object
    RoleResponseRelationships:
      description: Relationships of the role object returned by the API.
      properties:
        permissions:
          $ref: '#/components/schemas/RelationshipToPermissions'
      type: object
    RoleUpdateAttributes:
      description: Attributes of the role.
      properties:
        created_at:
          description: Creation time of the role.
          format: date-time
          readOnly: true
          type: string
        modified_at:
          description: Time of last role modification.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the role.
          type: string
      type: object
    RoleUpdateData:
      description: Data related to the update of a role.
      properties:
        attributes:
          $ref: '#/components/schemas/RoleUpdateAttributes'
        id:
          description: ID of the role.
          type: string
        type:
          $ref: '#/components/schemas/RolesType'
      type: object
    RoleUpdateRequest:
      description: Update a role.
      properties:
        data:
          $ref: '#/components/schemas/RoleUpdateData'
      type: object
    RoleUpdateResponse:
      description: Response containing information about an updated role.
      properties:
        data:
          description: Role object returned by the API.
          properties:
            attributes:
              $ref: '#/components/schemas/RoleUpdateAttributes'
            id:
              description: ID of the role.
              type: string
            relationships:
              $ref: '#/components/schemas/RoleResponseRelationships'
            type:
              $ref: '#/components/schemas/RolesType'
          required:
          - type
          type: object
      type: object
    RolesResponse:
      description: Response containing information about multiple roles.
      properties:
        data:
          description: Array of returned roles.
          items:
            $ref: '#/components/schemas/Role'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetaAttributes'
      type: object
    RolesSort:
      default: name
      description: Sorting options for roles.
      enum:
      - name
      - -name
      - modified_at
      - -modified_at
      - user_count
      - -user_count
      type: string
      x-enum-varnames:
      - NAME_ASCENDING
      - NAME_DESCENDING
      - MODIFIED_AT_ASCENDING
      - MODIFIED_AT_DESCENDING
      - USER_COUNT_ASCENDING
      - USER_COUNT_DESCENDING
    RolesType:
      default: roles
      description: Roles type.
      enum:
      - roles
      example: roles
      type: string
      x-enum-varnames:
      - ROLES
    SecurityMonitoringListRulesResponse:
      description: List of rules.
      properties:
        data:
          description: TODO.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleResponse'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetaAttributes'
      type: object
    SecurityMonitoringRuleCase:
      description: Case when signal is generated.
      properties:
        condition:
          description: 'A rule case contains logical operations (`>`,`>=`, `&&`, `||`)
            to determine if a signal should be generated

            based on the event counts in the previously defined queries.'
          type: string
        name:
          description: Name of the case.
          type: string
        notifications:
          description: Notification targets for each rule case.
          items:
            description: Notification.
            type: string
          type: array
        status:
          $ref: '#/components/schemas/SecurityMonitoringRuleSeverity'
      type: object
    SecurityMonitoringRuleCaseCreate:
      description: Case when signal is generated.
      properties:
        condition:
          description: 'A rule case contains logical operations (`>`,`>=`, `&&`, `||`)
            to determine if a signal should be generated

            based on the event counts in the previously defined queries.'
          type: string
        name:
          description: Name of the case.
          type: string
        notifications:
          description: Notification targets for each rule case.
          items:
            description: Notification.
            type: string
          type: array
        status:
          $ref: '#/components/schemas/SecurityMonitoringRuleSeverity'
      required:
      - status
      type: object
    SecurityMonitoringRuleCreatePayload:
      description: Create a new rule.
      properties:
        cases:
          description: Cases for generating signals.
          example: []
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleCaseCreate'
          type: array
        isEnabled:
          description: Whether the rule is enabled.
          example: true
          type: boolean
        message:
          description: Message for generated signals.
          example: ''
          type: string
        name:
          description: The name of the rule.
          example: ''
          type: string
        options:
          $ref: '#/components/schemas/SecurityMonitoringRuleOptions'
        queries:
          description: Queries for selecting logs which are part of the rule.
          example: []
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleQueryCreate'
          type: array
        tags:
          description: Tags for generated signals.
          example:
          - env:prod
          - team:security
          items:
            description: Tag.
            type: string
          type: array
      required:
      - name
      - isEnabled
      - queries
      - options
      - cases
      - message
      type: object
    SecurityMonitoringRuleEvaluationWindow:
      description: 'A time window is specified to match when at least one of the cases
        matches true. This is a sliding window

        and evaluates in real time.'
      enum:
      - 0
      - 60
      - 300
      - 600
      - 900
      - 1800
      - 3600
      - 7200
      format: int32
      type: integer
      x-enum-varnames:
      - ZERO_MINUTES
      - ONE_MINUTE
      - FIVE_MINUTES
      - TEN_MINUTES
      - FIFTEEN_MINUTES
      - THIRTY_MINUTES
      - ONE_HOUR
      - TWO_HOURS
    SecurityMonitoringRuleKeepAlive:
      description: "Once a signal is generated, the signal will remain \u201Copen\u201D\
        \ if a case is matched at least once within\nthis keep alive window."
      enum:
      - 0
      - 60
      - 300
      - 600
      - 900
      - 1800
      - 3600
      - 7200
      format: int32
      type: integer
      x-enum-varnames:
      - ZERO_MINUTES
      - ONE_MINUTE
      - FIVE_MINUTES
      - TEN_MINUTES
      - FIFTEEN_MINUTES
      - THIRTY_MINUTES
      - ONE_HOUR
      - TWO_HOURS
    SecurityMonitoringRuleMaxSignalDuration:
      description: "A signal will \u201Cclose\u201D regardless of the query being\
        \ matched once the time exceeds the maximum duration.\nThis time is calculated\
        \ from the first seen timestamp."
      enum:
      - 0
      - 60
      - 300
      - 600
      - 900
      - 1800
      - 3600
      - 7200
      - 10800
      - 21600
      - 43200
      - 86400
      format: int32
      type: integer
      x-enum-varnames:
      - ZERO_MINUTES
      - ONE_MINUTE
      - FIVE_MINUTES
      - TEN_MINUTES
      - FIFTEEN_MINUTES
      - THIRTY_MINUTES
      - ONE_HOUR
      - TWO_HOURS
      - THREE_HOURS
      - SIX_HOURS
      - TWELVE_HOURS
      - ONE_DAY
    SecurityMonitoringRuleOptions:
      description: Options on rules.
      properties:
        evaluationWindow:
          $ref: '#/components/schemas/SecurityMonitoringRuleEvaluationWindow'
        keepAlive:
          $ref: '#/components/schemas/SecurityMonitoringRuleKeepAlive'
        maxSignalDuration:
          $ref: '#/components/schemas/SecurityMonitoringRuleMaxSignalDuration'
      type: object
    SecurityMonitoringRuleQuery:
      description: Query for matching rule.
      properties:
        distinctFields:
          description: Field for which the cardinality is measured. Sent as an array.
          items:
            description: Field.
            type: string
          type: array
        groupByFields:
          description: Fields to group by.
          items:
            description: Field.
            type: string
          type: array
        name:
          description: Name of the query.
          type: string
        query:
          description: Query to run on logs.
          type: string
      type: object
    SecurityMonitoringRuleQueryCreate:
      description: Query for matching rule.
      properties:
        distinctFields:
          description: Field for which the cardinality is measured. Sent as an array.
          items:
            description: Field.
            type: string
          type: array
        groupByFields:
          description: Fields to group by.
          items:
            description: Field.
            type: string
          type: array
        name:
          description: Name of the query.
          type: string
        query:
          description: Query to run on logs.
          type: string
      required:
      - query
      type: object
    SecurityMonitoringRuleResponse:
      description: Detection rule.
      properties:
        cases:
          description: Cases for generating signals.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleCase'
          type: array
        createdAt:
          description: When the rule was created, timestamp in milliseconds.
          format: int64
          type: integer
        creationAuthorId:
          description: User ID of the user who created the rule.
          format: int64
          type: integer
        id:
          description: The ID of the rule.
          type: string
        isDefault:
          description: Whether the rule is included by default.
          type: boolean
        isDeleted:
          description: Whether the rule has been deleted.
          type: boolean
        isEnabled:
          description: Whether the rule is enabled.
          type: boolean
        message:
          description: Message for generated signals.
          type: string
        name:
          description: The name of the rule.
          type: string
        options:
          $ref: '#/components/schemas/SecurityMonitoringRuleOptions'
        queries:
          description: Queries for selecting logs which are part of the rule.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleQuery'
          type: array
        tags:
          description: Tags for generated signals.
          items:
            description: Tag.
            type: string
          type: array
        version:
          description: The version of the rule.
          format: int64
          type: integer
    SecurityMonitoringRuleSeverity:
      description: Severity of the Security Signal.
      enum:
      - info
      - low
      - medium
      - high
      - critical
      type: string
      x-enum-varnames:
      - INFO
      - LOW
      - MEDIUM
      - HIGH
      - CRITICAL
    SecurityMonitoringRuleUpdatePayload:
      description: Update an existing rule.
      properties:
        cases:
          description: Cases for generating signals.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleCase'
          type: array
        isEnabled:
          description: Whether the rule is enabled.
          type: boolean
        message:
          description: Message for generated signals.
          type: string
        name:
          description: Name of the rule.
          type: string
        options:
          $ref: '#/components/schemas/SecurityMonitoringRuleOptions'
        queries:
          description: Queries for selecting logs which are part of the rule.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleQuery'
          type: array
        tags:
          description: Tags for generated signals.
          items:
            description: Tag.
            type: string
          type: array
      type: object
    SecurityMonitoringSignal:
      description: Object description of a security signal.
      properties:
        attributes:
          description: The JSON object containing all signal attributes and their
            associated values.
          properties:
            attributes:
              additionalProperties: {}
              description: A JSON object of attributes in the security signal.
              example:
                workflow:
                  first_seen: '2020-06-23T14:46:01.000Z'
                  last_seen: '2020-06-23T14:46:49.000Z'
                  rule:
                    id: 0f5-e0c-805
                    name: 'Brute Force Attack Grouped By User '
                    version: 12
              type: object
            message:
              description: The message in the security signal defined by the rule
                that generated the signal.
              example: Detect Account Take Over (ATO) through brute force attempts
              type: string
            tags:
              description: An array of tags associated with the security signal.
              example:
              - security:attack
              - technique:T1110-brute-force
              format: array
              items:
                description: The tag associated with the security signal.
                format: string
            timestamp:
              description: The timestamp of the security signal.
              example: '2019-01-02T09:42:36.320Z'
              format: date-time
              type: string
          type: object
        id:
          description: The unique ID of the security signal.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/SecurityMonitoringSignalType'
      type: object
    SecurityMonitoringSignalListRequest:
      description: The request for a security signal list.
      properties:
        filter:
          description: Search filters for listing security signals.
          properties:
            from:
              description: The minimum timestamp for requested security signals.
              example: '2019-01-02T09:42:36.320Z'
              format: date-time
              type: string
            query:
              description: Search query for listing security signals.
              example: security:attack status:high
              type: string
            to:
              description: The maximum timestamp for requested security signals.
              example: '2019-01-03T09:42:36.320Z'
              format: date-time
              type: string
          type: object
        page:
          description: The paging attributes for listing security signals.
          properties:
            cursor:
              description: A list of results using the cursor provided in the previous
                query.
              example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
              type: string
            limit:
              default: 10
              description: The maximum number of security signals in the response.
              example: 25
              format: int32
              maximum: 1000
              type: integer
          type: object
        sort:
          $ref: '#/components/schemas/SecurityMonitoringSignalsSort'
      type: object
    SecurityMonitoringSignalType:
      default: signal
      description: The type of event.
      enum:
      - signal
      example: signal
      type: string
      x-enum-varnames:
      - SIGNAL
    SecurityMonitoringSignalsListResponse:
      description: The response object with all security signals matching the request
        and pagination information.
      properties:
        data:
          description: An array of security signals matching the request.
          items:
            $ref: '#/components/schemas/SecurityMonitoringSignal'
          type: array
        links:
          description: Links attributes.
          properties:
            next:
              description: 'The link for the next set of results. **Note**: The request
                can also be made using the

                POST endpoint.'
              example: https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
              type: string
          type: object
        meta:
          description: Meta attributes.
          properties:
            page:
              description: Paging attributes.
              properties:
                after:
                  description: 'The cursor used to get the next results, if any. To
                    make the next request, use the same

                    parameters with the addition of the `page[cursor]`.'
                  example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
                  type: string
              type: object
          type: object
      type: object
    SecurityMonitoringSignalsSort:
      description: The sort parameters used for querying security signals.
      enum:
      - timestamp
      - -timestamp
      type: string
      x-enum-varnames:
      - TIMESTAMP_ASCENDING
      - TIMESTAMP_DESCENDING
    Service:
      description: Represents a Service Item.
      properties:
        attributes:
          description: The JSON API Schema attributes.
          properties:
            created:
              description: Timestamp of when the service was created.
              format: date-time
              readOnly: true
              type: string
            modified:
              description: Timestamp of when the service was modified.
              format: date-time
              readOnly: true
              type: string
            name:
              description: Name of the service.
              example: service name
              type: string
          type: object
        id:
          description: The service's ID.
          example: fc9b135f77705831b1fdd2b9f56152ba
          type: string
        relationships:
          $ref: '#/components/schemas/BasicUserRelationships'
        type:
          $ref: '#/components/schemas/ServiceType'
      type: object
    ServiceArray:
      description: An array of services.
      items:
        $ref: '#/components/schemas/Service'
      type: array
    ServiceIncludedItems:
      description: An object related to a service which is included in the JSON API
        response.
      oneOf:
      - $ref: '#/components/schemas/User'
      type: object
    ServiceListResponse:
      description: Represents the JSON API Payload of a List of Service Items.
      properties:
        data:
          $ref: '#/components/schemas/ServiceArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/ServiceIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    ServiceRelationship:
      description: Service relationship data.
      properties:
        id:
          description: A unique identifier that represents the service.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/ServiceType'
      type: object
    ServiceRequest:
      description: JSON API request with a service payload.
      properties:
        data:
          $ref: '#/components/schemas/Service'
      required:
      - data
      type: object
    ServiceResponse:
      description: JSON API response with a service payload.
      properties:
        data:
          $ref: '#/components/schemas/Service'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/ServiceIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    ServiceType:
      default: services
      description: Service resource type.
      enum:
      - services
      type: string
      x-enum-varnames:
      - services
    StatsIncidentFacetType:
      default: aggregation_stats
      description: Type of the stats aggregation facet.
      enum:
      - aggregation_stats
      example: aggregation_stats
      type: string
      x-enum-varnames:
      - aggregation_stats
    Team:
      description: Represents a Team Item.
      properties:
        attributes:
          description: The JSON API Schema attributes.
          properties:
            created:
              description: Timestamp of when the team was created.
              format: date-time
              readOnly: true
              type: string
            modified:
              description: Timestamp of when the team was modified.
              format: date-time
              readOnly: true
              type: string
            name:
              description: Name of the team.
              example: team name
              type: string
          type: object
        id:
          description: The team's ID.
          example: fc9b135f77705831b1fdd2b9f56152ba
          type: string
        relationships:
          $ref: '#/components/schemas/BasicUserRelationships'
        type:
          $ref: '#/components/schemas/TeamType'
      type: object
    TeamArray:
      description: An array of teams.
      items:
        $ref: '#/components/schemas/Team'
      type: array
    TeamIncludedItems:
      description: An object related to a team which is included in the JSON API response.
      oneOf:
      - $ref: '#/components/schemas/User'
      type: object
    TeamListResponse:
      description: JSON API response with a list of team payloads.
      properties:
        data:
          $ref: '#/components/schemas/TeamArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/TeamIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    TeamRelationship:
      description: Team relationship data.
      properties:
        id:
          description: A unique identifier that represents the team.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/TeamType'
      type: object
    TeamRequest:
      description: JSON API request with a team payload.
      properties:
        data:
          $ref: '#/components/schemas/Team'
      required:
      - data
      type: object
    TeamResponse:
      description: JSON API response with a team payload.
      properties:
        data:
          $ref: '#/components/schemas/Team'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/TeamIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    TeamType:
      default: teams
      description: Team resource type.
      enum:
      - teams
      type: string
      x-enum-varnames:
      - teams
    TermsIncidentFacetType:
      default: aggregation_terms
      description: Type of the terms aggregation facet.
      enum:
      - aggregation_terms
      example: aggregation_terms
      type: string
      x-enum-varnames:
      - aggregation_terms
    User:
      description: User object returned by the API.
      properties:
        attributes:
          $ref: '#/components/schemas/UserAttributes'
        id:
          description: ID of the user.
          type: string
        relationships:
          $ref: '#/components/schemas/UserResponseRelationships'
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    UserAttributes:
      description: Attributes of user object returned by the API.
      properties:
        created_at:
          description: Creation time of the user.
          format: date-time
          type: string
        disabled:
          description: Whether the user is disabled.
          type: boolean
        email:
          description: Email of the user.
          type: string
        handle:
          description: Handle of the user.
          type: string
        icon:
          description: URL of the user's icon.
          type: string
        name:
          description: Name of the user.
          type: string
        status:
          description: Status of the user.
          type: string
        title:
          description: Title of the user.
          type: string
        verified:
          description: Whether the user is verified.
          type: boolean
      type: object
    UserCreateAttributes:
      description: Attributes of the created user.
      properties:
        email:
          description: The email of the user.
          type: string
        name:
          description: The name of the user.
          type: string
        title:
          description: The title of the user.
          type: string
      type: object
    UserCreateData:
      description: Object to create a user.
      properties:
        attributes:
          $ref: '#/components/schemas/UserCreateAttributes'
        relationships:
          $ref: '#/components/schemas/UserRelationships'
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    UserCreateRequest:
      description: Create a user.
      properties:
        data:
          $ref: '#/components/schemas/UserCreateData'
      type: object
    UserDefinedField:
      description: A customized field defined by users and attached to a certain object
        type (incidents, etc).
      properties:
        attributes:
          description: The field's attributes.
          properties:
            created:
              description: Timestamp of when the field was created.
              format: date-time
              readOnly: true
              type: string
            created_by:
              description: An embedded JSON API object of the user who created this
                field.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            created_by_uuid:
              description: The ID of the user who created this field.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            default_choice_id:
              description: ID of the default choice which is selected for each new
                object of the field's assigned `table_id` type.
              example: e2d172d386ef525c967d90be94c239b9
              type: string
            deleted:
              description: Timestamp of when the field was deleted.
              format: date-time
              readOnly: true
              type: string
            last_modified_by:
              description: An embedded JSON API object of the user who last modified
                this field.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            last_modified_uuid:
              description: The ID of the user who last modified this field.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            modified:
              description: Timestamp of when the field was modified.
              format: date-time
              readOnly: true
              type: string
            name:
              description: Name of the field.
              example: state
              type: string
            prerequisite:
              description: A label for boolean fields of the assigned `table_id` type
                which must be true for this field to be displayed.
              type: string
            table_id:
              $ref: '#/components/schemas/UserDefinedFieldTable'
            type:
              $ref: '#/components/schemas/UserDefinedFieldTypeID'
          type: object
        id:
          description: The field's ID.
          example: a91169ea3eb950dd85cc2a58c5a2d2c6
          type: string
        relationships:
          description: JSON API relationships.
          properties:
            choices:
              description: The choices available for selection on this field.
              properties:
                data:
                  description: The choice ID array.
                  items:
                    $ref: '#/components/schemas/UserDefinedFieldChoiceRelationship'
                  type: array
              type: object
            created_by_user:
              $ref: '#/components/schemas/UserRelationship'
            last_modified_by_user:
              $ref: '#/components/schemas/UserRelationship'
          type: object
        type:
          $ref: '#/components/schemas/UserDefinedFieldType'
      required:
      - id
      - type
      type: object
    UserDefinedFieldArray:
      description: An array of Incident configuration fields.
      items:
        $ref: '#/components/schemas/UserDefinedField'
      type: array
    UserDefinedFieldChoice:
      description: A choice which can be selected for a user-defined field.
      properties:
        attributes:
          description: The choice's attributes.
          properties:
            created:
              description: Timestamp of when the choice was created
              format: date-time
              readOnly: true
              type: string
            created_by:
              description: An embedded JSON API object of the user who created this
                choice.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            created_by_uuid:
              description: The ID of the user who created this choice.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            deleted:
              description: Timestamp of when the choice was deleted.
              format: date-time
              readOnly: true
              type: string
            last_modified_by:
              description: An embedded JSON API object of the user who last modified
                this choice.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            last_modified_uuid:
              description: The ID of the user who last modified this choice.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            modified:
              description: Timestamp of when the choice was modified
              format: date-time
              readOnly: true
              type: string
            name:
              description: Human-readable name of the choice.
              example: Active
              type: string
            user_defined_field_id:
              description: The ID of the field for which this choice can be selected.
              example: '123'
              type: string
            value:
              description: Value of the choice.
              example: active
              type: string
          type: object
        id:
          description: The choice's ID.
          example: 8809e2e9c15a5916979a473e30332ef1
          type: string
        relationships:
          $ref: '#/components/schemas/BasicUserRelationships'
        type:
          $ref: '#/components/schemas/UserDefinedFieldChoiceType'
      required:
      - id
      - type
      type: object
    UserDefinedFieldChoiceArray:
      description: An array of User Defined Choices.
      items:
        $ref: '#/components/schemas/UserDefinedFieldChoice'
      type: array
    UserDefinedFieldChoiceIncludedItems:
      description: An object related to a user-defined field which is included in
        the JSON API response.
      oneOf:
      - $ref: '#/components/schemas/User'
      type: object
    UserDefinedFieldChoiceListPayload:
      description: JSON API response with a list of user-defined field choice payloads.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedFieldChoiceArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/UserDefinedFieldChoiceIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    UserDefinedFieldChoiceRelationship:
      description: Choice relationship data.
      properties:
        id:
          description: A unique identifier that represents the choice.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UserDefinedFieldChoiceType'
      type: object
    UserDefinedFieldChoiceRequest:
      description: JSON API request with a user-defined field choice payload.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedFieldChoice'
      required:
      - data
      type: object
    UserDefinedFieldChoiceResponse:
      description: JSON API response with a user-defined field choice payload.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedFieldChoice'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/UserDefinedFieldChoiceIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    UserDefinedFieldChoiceType:
      default: user_defined_choice
      description: User-defined field choice resource type.
      enum:
      - user_defined_choice
      type: string
      x-enum-varnames:
      - user_defined_choice
    UserDefinedFieldIncludedItems:
      description: An object related to a user-defined field which is included in
        the JSON API response.
      oneOf:
      - $ref: '#/components/schemas/EmbeddedIncidentsUser'
      - $ref: '#/components/schemas/UserDefinedFieldChoice'
      type: object
    UserDefinedFieldListResponse:
      description: JSON API response with a list of user-defined field payloads.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedFieldArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/UserDefinedFieldIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    UserDefinedFieldRelationship:
      description: Field relationship data.
      properties:
        id:
          description: A unique identifier that represents the field.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UserDefinedFieldType'
      type: object
    UserDefinedFieldRequest:
      description: JSON API request with a user-defined field payload.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedField'
      required:
      - data
      type: object
    UserDefinedFieldResponse:
      description: JSON API response with a user-defined field payload.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedField'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/UserDefinedFieldIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    UserDefinedFieldSelection:
      description: Represents a selection for a particular field and object of that
        field's table_id.
      properties:
        attributes:
          description: The selection's attributes.
          properties:
            choice_override:
              description: The choice value to be used with text box field types.
              example: Any free text value can be stored in the override
              type: string
            created:
              description: Timestamp of when an selection was created.
              format: date-time
              readOnly: true
              type: string
            deleted:
              description: Timestamp of when an selection was deleted.
              format: date-time
              readOnly: true
              type: string
            last_modified_by:
              description: An embedded JSON API object of the user who last modified
                this selection.
              properties:
                data:
                  $ref: '#/components/schemas/EmbeddedIncidentsUser'
              readOnly: true
              type: object
            last_modified_by_uuid:
              description: The ID of the user who last modified this selection.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
            modified:
              description: Timestamp of when an selection was modified.
              format: date-time
              readOnly: true
              type: string
            object_id:
              description: The ID of the object for which this selection holds a value.
              example: 00000000-0000-0000-0000-000000000000
              readOnly: true
              type: string
          type: object
        id:
          description: The selection's ID.
          example: b229d4cddfa35f02a82a878cabf5889b
          readOnly: true
          type: string
        relationships:
          description: JSON API relationships.
          properties:
            choice:
              description: The user-defined field choice which this selection chooses.
              properties:
                data:
                  $ref: '#/components/schemas/UserDefinedFieldChoiceRelationship'
              type: object
            field:
              description: The user-defined field for which this selections stores
                a value.
              properties:
                data:
                  $ref: '#/components/schemas/UserDefinedFieldRelationship'
              type: object
            last_modified_by_user:
              $ref: '#/components/schemas/UserRelationship'
          type: object
        type:
          $ref: '#/components/schemas/UserDefinedFieldSelectionType'
      required:
      - id
      - type
      type: object
    UserDefinedFieldSelectionArray:
      description: An array of User Defined Selections.
      items:
        $ref: '#/components/schemas/UserDefinedFieldSelection'
      type: array
    UserDefinedFieldSelectionIncludedItems:
      description: An object related to a selection which is included in the JSON
        API response.
      oneOf:
      - $ref: '#/components/schemas/UserDefinedField'
      - $ref: '#/components/schemas/UserDefinedFieldChoice'
      type: object
    UserDefinedFieldSelectionListResponse:
      description: The JSON API payload of a list of selections.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedFieldSelectionArray'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/UserDefinedFieldSelectionIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    UserDefinedFieldSelectionRelationship:
      description: Field selection relationship data.
      properties:
        id:
          description: A unique identifier that represents the field selection.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UserDefinedFieldSelectionType'
      type: object
    UserDefinedFieldSelectionRequest:
      description: JSON API request with a user-defined field selection payload.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedFieldSelection'
      required:
      - data
      type: object
    UserDefinedFieldSelectionResponse:
      description: JSON API response with a user-defined field selection payload.
      properties:
        data:
          $ref: '#/components/schemas/UserDefinedFieldSelection'
        included:
          description: Included objects from JSON API relationships.
          items:
            $ref: '#/components/schemas/UserDefinedFieldSelectionIncludedItems'
          readOnly: true
          type: array
      required:
      - data
      type: object
    UserDefinedFieldSelectionType:
      default: user_defined_selection
      description: User-defined field resource type.
      enum:
      - user_defined_selection
      type: string
      x-enum-varnames:
      - user_defined_selection
    UserDefinedFieldTable:
      description: ID representing the type of objects to which a field is attached.
      enum:
      - 0
      - 1
      example: 0
      format: int32
      type: integer
      x-enum-varnames:
      - INCIDENT
      - POSTMORTEM
    UserDefinedFieldType:
      default: user_defined_field
      description: User-defined field resource type.
      enum:
      - user_defined_field
      type: string
      x-enum-varnames:
      - user_defined_field
    UserDefinedFieldTypeID:
      description: ID representing the type of field behavior, such as drop-down or
        multi-select
      enum:
      - 1
      - 2
      - 3
      - 4
      example: 1
      format: int32
      type: integer
      x-enum-varnames:
      - DROPDOWN
      - MULTISELECT
      - TEXTBOX
      - TEXTARRAY
    UserInvitationData:
      description: Object to create a user invitation.
      properties:
        relationships:
          $ref: '#/components/schemas/UserInvitationRelationships'
        type:
          $ref: '#/components/schemas/UserInvitationsType'
      type: object
    UserInvitationDataAttributes:
      description: Attributes of a user invitation.
      properties:
        created_at:
          description: Creation time of the user invitation.
          format: date-time
          type: string
        expires_at:
          description: Time of invitation expiration.
          format: date-time
          type: string
        invite_type:
          description: Type of invitation.
          type: string
        uuid:
          description: UUID of the user invitation.
          type: string
      type: object
    UserInvitationRelationships:
      description: Relationships data for user invitation.
      properties:
        user:
          $ref: '#/components/schemas/RelationshipToUser'
      type: object
    UserInvitationResponse:
      description: User invitation as returned by the API.
      properties:
        data:
          $ref: '#/components/schemas/UserInvitationResponseData'
      type: object
    UserInvitationResponseData:
      description: Object of a user invitation returned by the API.
      properties:
        attributes:
          $ref: '#/components/schemas/UserInvitationDataAttributes'
        id:
          description: ID of the user invitation.
          type: string
        type:
          $ref: '#/components/schemas/UserInvitationsType'
      type: object
    UserInvitationsRequest:
      description: Object to invite users to join the organization.
      properties:
        data:
          description: List of user invitations.
          items:
            $ref: '#/components/schemas/UserInvitationData'
          type: array
      type: object
    UserInvitationsResponse:
      description: User invitations as returned by the API.
      properties:
        data:
          description: Array of user invitations.
          items:
            $ref: '#/components/schemas/UserInvitationResponseData'
          type: array
      type: object
    UserInvitationsType:
      default: user_invitations
      description: User invitations type.
      enum:
      - user_invitations
      type: string
      x-enum-varnames:
      - USER_INVITATIONS
    UserRelationship:
      description: JSON API relationship for users.
      properties:
        data:
          description: The User relationship data.
          properties:
            id:
              description: A unique identifier that represents the user.
              example: 00000000-0000-0000-0000-000000000000
              type: string
            type:
              $ref: '#/components/schemas/UsersType'
          type: object
      type: object
    UserRelationships:
      description: Relationships of the user object.
      properties:
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UserResponse:
      description: Response containing information about a single user.
      properties:
        data:
          $ref: '#/components/schemas/User'
        included:
          description: Array of objects related to the user.
          items:
            $ref: '#/components/schemas/UserResponseIncludedItem'
          type: array
      type: object
    UserResponseIncludedItem:
      description: An object related to a user.
      oneOf:
      - $ref: '#/components/schemas/Organization'
      - $ref: '#/components/schemas/Permission'
      - $ref: '#/components/schemas/Role'
      type: object
    UserResponseRelationships:
      description: Relationships of the user object returned by the API.
      properties:
        org:
          $ref: '#/components/schemas/RelationshipToOrganization'
        other_orgs:
          $ref: '#/components/schemas/RelationshipToOrganizations'
        other_users:
          $ref: '#/components/schemas/RelationshipToUsers'
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UserUpdateAttributes:
      description: Attributes of the edited user.
      properties:
        disabled:
          description: If the user is enabled or disabled.
          type: boolean
        email:
          description: The email of the user.
          type: string
        name:
          description: The name of the user.
          type: string
      type: object
    UserUpdateData:
      description: Object to update a user.
      properties:
        attributes:
          $ref: '#/components/schemas/UserUpdateAttributes'
        id:
          description: ID of the user.
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    UserUpdateRequest:
      description: Update a user.
      properties:
        data:
          $ref: '#/components/schemas/UserUpdateData'
      type: object
    UsersResponse:
      description: Response containing information about multiple users.
      properties:
        data:
          description: Array of returned users.
          items:
            $ref: '#/components/schemas/User'
          type: array
        included:
          description: Array of objects related to the users.
          items:
            $ref: '#/components/schemas/UserResponseIncludedItem'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetaAttributes'
      type: object
    UsersType:
      default: users
      description: Users resource type.
      enum:
      - users
      type: string
      x-enum-varnames:
      - USERS
  securitySchemes:
    apiKeyAuth:
      description: Your Datadog API Key.
      in: header
      name: DD-API-KEY
      type: apiKey
      x-env-name: DD_CLIENT_API_KEY
    appKeyAuth:
      description: Your Datadog APP Key.
      in: header
      name: DD-APPLICATION-KEY
      type: apiKey
      x-env-name: DD_CLIENT_APP_KEY
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: https://www.datadoghq.com/support/
  description: Collection of all Datadog Public endpoints.
  title: Datadog API V2 Collection
  version: '1.0'
openapi: 3.0.0
paths:
  /api/v2/dashboard/lists/manual/{dashboard_list_id}/dashboards:
    delete:
      description: Delete dashboards from an existing dashboard list.
      operationId: DeleteDashboardListItems
      parameters:
      - description: ID of the dashboard list to delete items from.
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListDeleteItemsRequest'
        description: Dashboards to delete from the dashboard list.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListDeleteItemsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete items from a dashboard list
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
    get:
      description: "Fetch the dashboard list\u2019s dashboard definitions."
      operationId: GetDashboardListItems
      parameters:
      - description: ID of the dashboard list to get items from.
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListItems'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get a Dashboard List
      tags:
      - Dashboard Lists
    post:
      description: Add dashboards to an existing dashboard list.
      operationId: CreateDashboardListItems
      parameters:
      - description: ID of the dashboard list to add items to.
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListAddItemsRequest'
        description: Dashboards to add to the dashboard list.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListAddItemsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Add Items to a Dashboard List
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
    put:
      description: Update dashboards of an existing dashboard list.
      operationId: UpdateDashboardListItems
      parameters:
      - description: ID of the dashboard list to update items from.
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListUpdateItemsRequest'
        description: New dashboards of the dashboard list.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListUpdateItemsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update items of a dashboard list
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
  /api/v2/incidents:
    get:
      description: Get all incidents for a given organization. If the `include[users]`
        query parameter is not set, the included attribute and associated user relationships
        will not be returned.
      operationId: GetIncidents
      parameters:
      - $ref: '#/components/parameters/IncidentIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get a list of incidents
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new incident.
      operationId: CreateIncident
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentCreateRequestWithInitialData'
        description: Incident Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new incident
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/config/fields:
    get:
      description: Get all fields for a given organization. If the `include[users]`
        query parameter is not set, the included attribute and associated user relationships
        will not be returned.
      operationId: GetUserDefinedFields
      parameters:
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/UserDefinedFieldIncludeQueryParameter'
      - $ref: '#/components/parameters/FilterRequiredQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get a list of all configuration fields
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new user-defined field.
      operationId: CreateUserDefinedField
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinedFieldRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldResponse'
          description: Created
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new user-defined field
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/config/fields/initialize:
    post:
      description: Creates the initial set of reserved fields for the organization.
        For example, the state field is created for incidents with a default set of
        choices for states such as "active" or "resolved". These fields must exist
        for the incident-app to operate as expected. This action must be performed
        at least once prior to usage of the incident-app.
      operationId: InitializedUserDefinedFields
      responses:
        '201':
          description: OK
        '409':
          $ref: '#/components/responses/409DefaultResponse'
      summary: Creates the initial user-defined fields
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/config/fields/{field_id}:
    delete:
      description: Deletes an existing field.
      operationId: DeleteUserDefinedField
      parameters:
      - $ref: '#/components/parameters/UserDefinedFieldIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Deletes an existing field
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get the details of a configuration field.
      operationId: GetUserDefinedField
      parameters:
      - $ref: '#/components/parameters/UserDefinedFieldIDPathParameter'
      - $ref: '#/components/parameters/UserDefinedFieldIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get the details of a field
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing field. Only provide the attributes which should
        be updated as this request is a partial update.
      operationId: PatchUserDefinedField
      parameters:
      - $ref: '#/components/parameters/UserDefinedFieldIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinedFieldRequest'
        description: Incident Configuration Field Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing user-defined field
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/config/fields/{field_id}/relationships/choices:
    get:
      description: Get all choices for a given field. If the `include[users]` query
        parameter is provided, the included attribute will contain the users related
        to these user-defined field choices.
      operationId: GetUserDefinedFieldChoices
      parameters:
      - $ref: '#/components/parameters/UserDefinedFieldIDPathParameter'
      - $ref: '#/components/parameters/UserDefinedFieldChoiceIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldChoiceListPayload'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get all choices for the given field
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new choice for a user-defined field.
      operationId: CreateUserDefinedFieldChoice
      parameters:
      - $ref: '#/components/parameters/UserDefinedFieldIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinedFieldChoiceRequest'
        description: Incident Configuration Field Choice Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldChoiceResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new choice
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/config/fields/{field_id}/relationships/choices/{choice_id}:
    delete:
      description: Delete an existing choice for a user-defined field.
      operationId: DeleteUserDefinedFieldChoice
      parameters:
      - $ref: '#/components/parameters/UserDefinedFieldIDPathParameter'
      - $ref: '#/components/parameters/UserDefinedFieldChoiceIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Delete an existing choice for a user-defined field
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get the details of a user-defined field choice. If the `include[users]`
        query parameter is provided, the included attribute will contain the users
        related to these user-defined field choices.
      operationId: GetUserDefinedFieldChoice
      parameters:
      - $ref: '#/components/parameters/UserDefinedFieldIDPathParameter'
      - $ref: '#/components/parameters/UserDefinedFieldChoiceIDPathParameter'
      - $ref: '#/components/parameters/WithUsersQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldChoiceResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get the details of a user-defined field choice
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing choice. Only provide the attributes which should
        be updated as this request performs a partial update.
      operationId: PatchUserDefinedFieldChoice
      parameters:
      - $ref: '#/components/parameters/UserDefinedFieldIDPathParameter'
      - $ref: '#/components/parameters/UserDefinedFieldChoiceIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinedFieldChoiceRequest'
        description: User-defined field choice payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldChoiceResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing choice for a user-defined field
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/config/tag_keys:
    get:
      description: Get tag keys which can be used in user-defined fields of the metric
        tag type.
      operationId: GetTagKeys
      parameters:
      - $ref: '#/components/parameters/TagKeySearchQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTagKeyResultsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Search tag keys for use in user-defined fields
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/config/tag_values:
    get:
      description: Get values reported for a tag key that can be selected for user-defined
        fields with that key.
      operationId: GetTagValues
      parameters:
      - $ref: '#/components/parameters/TagKeySearchQueryParameter'
      - $ref: '#/components/parameters/TagValuesTagKeyQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTagValueResultsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Search tag values for a key to select on incidents
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/postmortems:
    get:
      description: Get all postmortems for a given incident. Note that there should
        only ever be 0 or 1 postmortems for a given incident.
      operationId: GetIncidentPostmortems
      parameters:
      - $ref: '#/components/parameters/PostmortemIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPostmortemListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get a list of all Postmortems
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new postmortem for the given incident.
      operationId: CreateIncidentPostmortem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentPostmortemRequest'
        description: Incident Postmortem Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPostmortemResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new postmortem
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/postmortems/{postmortem_id}:
    delete:
      description: Deletes an existing postmortem for the given incident.
      operationId: DeleteIncidentPostmortem
      parameters:
      - $ref: '#/components/parameters/IncidentPostmortemIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing postmortem
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get details of a postmortem for the given incident.
      operationId: GetIncidentPostmortem
      parameters:
      - $ref: '#/components/parameters/IncidentPostmortemIDPathParameter'
      - $ref: '#/components/parameters/PostmortemIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPostmortemResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get details of a postmortem
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing postmortem. Only provide the attributes which
        should be updated as this request is a partial update.
      operationId: PatchIncidentPostmortem
      parameters:
      - $ref: '#/components/parameters/IncidentPostmortemIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentPostmortemRequest'
        description: Incident Postmortem Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPostmortemResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing postmortem
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/search:
    get:
      description: Search for incidents using our string query to retrieve matched
        queries.
      operationId: SearchIncidents
      parameters:
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/IncidentSearchQueryQueryParameter'
      - $ref: '#/components/parameters/IncidentSearchIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentSearchResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Search incidents
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}:
    delete:
      description: Deletes an existing incident from the users organization.
      operationId: DeleteIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Delete an existing incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get the details of an incident by `incident_id` or `public_id`.
        If querying by `public_id`, set the `is_public_id` query parameter to `true`.
      operationId: GetIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentIncludeQueryParameter'
      - description: Set `true` if provided `incident_id` is a `public_id`.
        in: query
        name: is_public_id
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get the details of an incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing incident. Only provide the attributes which
        should be updated as this request is a partial update.
      operationId: PatchIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentRequest'
        description: Incident Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing incident
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/integrations:
    get:
      description: Get all integration metadata items for a given incident.
      operationId: GetIncidentIntegrationMetadatas
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentIntegrationMetadataListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get all metadata items for an incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new integration metadata for the given incident, awaiting
        completion in the integration to be filled with the relevant metadata.
      operationId: CreateIncidentIntegrationMetadata
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentIntegrationMetadataRequest'
        description: Incident integration metadata Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentIntegrationMetadataResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new integration metadata
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/integrations/{metadata_id}:
    delete:
      description: Deletes an existing integration metadata for the given incident.
      operationId: DeleteIncidentIntegrationMetadata
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentIntegrationMetadataIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Deletes a metadata for the given incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get the details of an incident integration metadata.
      operationId: GetIncidentIntegrationMetadata
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentIntegrationMetadataIDPathParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentIntegrationMetadataResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get details of a metadata
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing integration metadata. Only provide the attributes
        which should be updated as this request is a partial update.
      operationId: PatchIncidentIntegrationMetadata
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentIntegrationMetadataIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentIntegrationMetadataRequest'
        description: Incident integration metadata payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentIntegrationMetadataResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing integration metadata
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/selections:
    get:
      description: Get all selections for a given incident.
      operationId: GetUserDefinedFieldSelections
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/UserDefinedFieldSelectionIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldSelectionListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get all selections for the given incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new selection for the given incident.
      operationId: CreateUserDefinedFieldSelection
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinedFieldSelectionRequest'
        description: Incident Selection Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldSelectionResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new selection
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/selections/{selection_id}:
    delete:
      description: Deletes an existing selection for the given incident.
      operationId: DeleteUserDefinedFieldSelection
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/UserDefinedFieldSelectionIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Deletes an existing selection
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing selection. Only the choice field can be updated
        for a given selection.
      operationId: PatchUserDefinedFieldSelection
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/UserDefinedFieldSelectionIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinedFieldSelectionRequest'
        description: Incident Selection Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedFieldSelectionResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing selection
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/services:
    get:
      description: Get all services associated with a given incident.
      operationId: GetServicesForIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentServiceIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get all services for the given incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Add a service to a given incident.
      operationId: AddServiceToIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        description: Services Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Add a new service to an incident
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/services/{service_id}:
    delete:
      description: Remove a service from an incident.
      operationId: RemoveServiceFromIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/ServiceIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Remove a service from an incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/teams:
    get:
      description: Get all teams associated with a given incident.
      operationId: GetTeamsForIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentTeamIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get all teams for the given incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Add a team to a given incident.
      operationId: AddTeamToIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
        description: Teams Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamListResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Add a new team to an incident
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/teams/{team_id}:
    delete:
      description: Remove a team from an incident.
      operationId: RemoveTeamFromIncident
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/TeamIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Remove a team from an incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/todos:
    get:
      description: Get all to-dos for a given incident.
      operationId: GetIncidentTodos
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentToDoIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get all to-dos for the given incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new to-do for the given incident.
      operationId: CreateIncidentTodo
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTodoRequest'
        description: Incident to-do Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new to-do
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/relationships/todos/{todo_id}:
    delete:
      description: Deletes an existing to-do for the given incident.
      operationId: DeleteIncidentTodo
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentTodoIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Deletes an existing to-do for the given incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get the details of an incident to-do.
      operationId: GetIncidentTodo
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentTodoIDPathParameter'
      - $ref: '#/components/parameters/IncidentToDoIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get the details of an incident to-do
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing to-do. Only provide the attributes which should
        be updated as this request is a partial update.
      operationId: PatchIncidentTodo
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentTodoIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTodoRequest'
        description: Incident to-do Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing to-do
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/timeline:
    get:
      description: Get all timeline cells for a given incident.
      operationId: GetIncidentTimelineCells
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentTimelineCellIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTimelineCellListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get all timeline cells for the given incident
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new timeline cell for the given incident.
      operationId: CreateIncidentTimelineCell
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTimelineCellRequest'
        description: Incident Timeline Cell Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTimelineCellResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new timeline cell
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/incidents/{incident_id}/timeline/{cell_id}:
    delete:
      description: Deletes an existing timeline cell for the given incident.
      operationId: DeleteIncidentTimelineCell
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentTimelineCellIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Deletes an existing timeline cell
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get the details of an incident timeline cell.
      operationId: GetIncidentTimelineCell
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentTimelineCellIDPathParameter'
      - $ref: '#/components/parameters/IncidentTimelineCellIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTimelineCellResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get the details of an incident timeline cell
      tags:
      - Incidents
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing timeline cell. Only provide the attributes
        which should be updated as this request is a partial update. Only the creator
        of the timeline cell can update its contents.
      operationId: PatchIncidentTimelineCell
      parameters:
      - $ref: '#/components/parameters/IncidentIDPathParameter'
      - $ref: '#/components/parameters/IncidentTimelineCellIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTimelineCellRequest'
        description: Incident Timeline Cell Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTimelineCellResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing timeline cell
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/analytics/aggregate:
    post:
      description: The public API endpoint to aggregate events into buckets and compute
        metrics and timeseries.
      operationId: AggregateLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsAggregateRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAggregateResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
      summary: Aggregate events
      tags:
      - Logs
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/config/archives:
    get:
      description: Get the list of configured logs archives with their definitions.
      operationId: ListLogsArchives
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsArchives'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all archives
      tags:
      - Logs Archives
    post:
      description: Create an archive in your organization.
      operationId: CreateLogsArchive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsArchiveCreateRequest'
        description: The definition of the new archive.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsArchive'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Create an archive
      tags:
      - Logs Archives
      x-codegen-request-body-name: body
  /api/v2/logs/config/archives/{archive_id}:
    delete:
      description: Delete a given archive from your organization.
      operationId: DeleteLogsArchive
      parameters:
      - $ref: '#/components/parameters/ArchiveID'
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Delete an archive
      tags:
      - Logs Archives
    get:
      description: Get a specific archive from your organization.
      operationId: GetLogsArchive
      parameters:
      - $ref: '#/components/parameters/ArchiveID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsArchive'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get an archive
      tags:
      - Logs Archives
    put:
      description: 'Update a given archive configuration.


        **Note**: Using this method updates your archive configuration by **replacing**

        your current configuration with the new one sent to your Datadog organization.'
      operationId: UpdateLogsArchive
      parameters:
      - $ref: '#/components/parameters/ArchiveID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsArchiveCreateRequest'
        description: New definition of the archive.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsArchive'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Update an archive
      tags:
      - Logs Archives
      x-codegen-request-body-name: body
  /api/v2/logs/config/archives/{archive_id}/readers:
    delete:
      description: Removes a role from an archive. ([Roles API](https://docs.datadoghq.com/api/v2/roles/))
      operationId: RemoveRoleFromArchive
      parameters:
      - $ref: '#/components/parameters/ArchiveID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToRole'
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Revoke role from an archive
      tags:
      - Logs Archives
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Returns all read roles a given archive is restricted to.
      operationId: ListArchiveReadRoles
      parameters:
      - $ref: '#/components/parameters/ArchiveID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: List read roles for an archive
      tags:
      - Logs Archives
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Adds a read role to an archive. ([Roles API](https://docs.datadoghq.com/api/v2/roles/))
      operationId: AddReadRoleToArchive
      parameters:
      - $ref: '#/components/parameters/ArchiveID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToRole'
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Grant role to an archive
      tags:
      - Logs Archives
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/config/restriction_queries:
    get:
      description: Returns all restriction queries, including their names and IDs.
      operationId: ListRestrictionQueries
      parameters:
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictionQueryListResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List restriction queries
      tags:
      - Logs Restriction Queries
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Create a new restriction query for your organization.
      operationId: CreateRestrictionQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestrictionQueryCreatePayload'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictionQueryWithoutRelationshipsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create a restriction query
      tags:
      - Logs Restriction Queries
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/config/restriction_queries/role/{role_id}:
    get:
      description: Get restriction query for a given role.
      operationId: GetRoleRestrictionQuery
      parameters:
      - $ref: '#/components/parameters/RestrictionQueryRoleID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictionQueryListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Get restriction query for a given role
      tags:
      - Logs Restriction Queries
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/config/restriction_queries/user/{user_id}:
    get:
      description: Get all restriction queries for a given user.
      operationId: ListUserRestrictionQueries
      parameters:
      - $ref: '#/components/parameters/RestrictionQueryUserID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictionQueryListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Get all restriction queries for a given user
      tags:
      - Logs Restriction Queries
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/config/restriction_queries/{restriction_query_id}:
    delete:
      description: Deletes a restriction query.
      operationId: DeleteRestrictionQuery
      parameters:
      - $ref: '#/components/parameters/RestrictionQueryID'
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Delete a restriction query
      tags:
      - Logs Restriction Queries
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get a restriction query in the organization specified by the restriction
        query's `restriction_query_id`.
      operationId: GetRestrictionQuery
      parameters:
      - $ref: '#/components/parameters/RestrictionQueryID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictionQueryWithRelationshipsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a restriction query
      tags:
      - Logs Restriction Queries
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Edit a restriction query.
      operationId: UpdateRestrictionQuery
      parameters:
      - $ref: '#/components/parameters/RestrictionQueryID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestrictionQueryUpdatePayload'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictionQueryWithoutRelationshipsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Update a restriction query
      tags:
      - Logs Restriction Queries
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/config/restriction_queries/{restriction_query_id}/roles:
    delete:
      description: Removes a role from a restriction query.
      operationId: RemoveRoleFromRestrictionQuery
      parameters:
      - $ref: '#/components/parameters/RestrictionQueryID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToRole'
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Revoke role from a restriction query
      tags:
      - Logs Restriction Queries
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Returns all roles that have a given restriction query.
      operationId: ListRestrictionQueryRoles
      parameters:
      - $ref: '#/components/parameters/RestrictionQueryID'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictionQueryRolesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: List roles for a restriction query
      tags:
      - Logs Restriction Queries
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Adds a role to a restriction query.
      operationId: AddRoleToRestrictionQuery
      parameters:
      - $ref: '#/components/parameters/RestrictionQueryID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToRole'
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Grant role to a restriction query
      tags:
      - Logs Restriction Queries
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/events:
    get:
      description: 'List endpoint returns logs that match a log search query.

        [Results are paginated][1].


        Both this endpoint and the POST endpoint can be used interchangeably when
        listing

        logs.


        **If you are considering archiving logs for your organization,

        consider use of the Datadog archive capabilities instead of the log list API.

        See [Datadog Logs Archive documentation][2].**


        [1]: /logs/guide/collect-multiple-logs-with-pagination

        [2]: https://docs.datadoghq.com/logs/archives'
      operationId: ListLogsGet
      parameters:
      - description: Search query following logs syntax.
        example: '@datacenter:us @role:db'
        in: query
        name: filter[query]
        required: false
        schema:
          type: string
      - description: 'For customers with multiple indexes, the indexes to search

          Defaults to ''*'' which means all indexes'
        example: main
        in: query
        name: filter[index]
        required: false
        schema:
          type: string
      - description: Minimum timestamp for requested logs.
        example: '2019-01-02T09:42:36.320Z'
        in: query
        name: filter[from]
        required: false
        schema:
          format: date-time
          type: string
      - description: Maximum timestamp for requested logs.
        example: '2019-01-03T09:42:36.320Z'
        in: query
        name: filter[to]
        required: false
        schema:
          format: date-time
          type: string
      - description: Order of logs in results.
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/LogsSort'
      - description: List following results with a cursor provided in the previous
          query.
        example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
        in: query
        name: page[cursor]
        required: false
        schema:
          type: string
      - description: Maximum number of logs in the response.
        example: 25
        in: query
        name: page[limit]
        required: false
        schema:
          default: 10
          format: int32
          maximum: 1000
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
      summary: Get a quick list of logs
      tags:
      - Logs
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/logs/events/search:
    post:
      description: 'List endpoint returns logs that match a log search query.

        [Results are paginated][1].


        Both this endpoint and the GET endpoint can be used interchangeably when listing

        logs.


        **If you are considering archiving logs for your organization,

        consider use of the Datadog archive capabilities instead of the log list API.

        See [Datadog Logs Archive documentation][2].**


        [1]: /logs/guide/collect-multiple-logs-with-pagination

        [2]: https://docs.datadoghq.com/logs/archives'
      operationId: ListLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsListRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
      summary: Get a list of logs
      tags:
      - Logs
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/permissions:
    get:
      description: Returns a list of all permissions, including name, description,
        and ID.
      operationId: ListPermissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List permissions
      tags:
      - Roles
  /api/v2/roles:
    get:
      description: Returns all roles, including their names and IDs.
      operationId: ListRoles
      parameters:
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      - description: 'Sort roles depending on the given field. Sort order is **ascending**
          by default.

          Sort order is **descending** if the field is prefixed by a negative sign,
          for example:

          `sort=-name`.'
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/RolesSort'
      - description: Filter all roles by the given string.
        in: query
        name: filter
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List roles
      tags:
      - Roles
    post:
      description: Create a new role for your organization.
      operationId: CreateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleCreateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create role
      tags:
      - Roles
      x-codegen-request-body-name: body
  /api/v2/roles/{role_id}:
    delete:
      description: Disables a role.
      operationId: DeleteRole
      parameters:
      - $ref: '#/components/parameters/RoleID'
      responses:
        '204':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Delete role
      tags:
      - Roles
      x-codegen-request-body-name: body
    get:
      description: "Get a role in the organization specified by the role\u2019s `role_id`."
      operationId: GetRole
      parameters:
      - $ref: '#/components/parameters/RoleID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a role
      tags:
      - Roles
      x-codegen-request-body-name: body
    patch:
      description: Edit a role. Can only be used with application keys belonging to
        administrators.
      operationId: UpdateRole
      parameters:
      - $ref: '#/components/parameters/RoleID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdateRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleUpdateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Unprocessable Entity
      summary: Update a role
      tags:
      - Roles
      x-codegen-request-body-name: body
  /api/v2/roles/{role_id}/permissions:
    delete:
      description: Removes a permission from a role.
      operationId: RemovePermissionFromRole
      parameters:
      - $ref: '#/components/parameters/RoleID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToPermission'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Revoke permission
      tags:
      - Roles
      x-codegen-request-body-name: body
    get:
      description: Returns a list of all permissions for a single role.
      operationId: ListRolePermissions
      parameters:
      - $ref: '#/components/parameters/RoleID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: List permissions for a role
      tags:
      - Roles
      x-codegen-request-body-name: body
    post:
      description: Adds a permission to a role.
      operationId: AddPermissionToRole
      parameters:
      - $ref: '#/components/parameters/RoleID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToPermission'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Grant permission to a role
      tags:
      - Roles
      x-codegen-request-body-name: body
  /api/v2/roles/{role_id}/users:
    delete:
      description: Removes a user from a role.
      operationId: RemoveUserFromRole
      parameters:
      - $ref: '#/components/parameters/RoleID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToUser'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Remove a user from a role
      tags:
      - Roles
      x-codegen-request-body-name: body
    get:
      description: Gets all users of a role.
      operationId: ListRoleUsers
      parameters:
      - $ref: '#/components/parameters/RoleID'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      - description: 'User attribute to order results by. Sort order is **ascending**
          by default.

          Sort order is **descending** if the field is prefixed by a negative sign,

          for example `sort=-name`. Options: `name`, `email`, `status`.'
        in: query
        name: sort
        required: false
        schema:
          default: name
          type: string
      - description: Filter all users by the given string. Defaults to no filtering.
        in: query
        name: filter
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get all users of a role
      tags:
      - Roles
    post:
      description: Adds a user to a role.
      operationId: AddUserToRole
      parameters:
      - $ref: '#/components/parameters/RoleID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToUser'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Add a user to a role
      tags:
      - Roles
      x-codegen-request-body-name: body
  /api/v2/security_monitoring/rules:
    get:
      description: List rules.
      operationId: ListSecurityMonitoringRules
      parameters:
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringListRulesResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
      summary: List rules
      tags:
      - Security Monitoring
    post:
      description: Create a detection rule.
      operationId: CreateSecurityMonitoringRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityMonitoringRuleCreatePayload'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringRuleResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
      summary: Create a detection rule
      tags:
      - Security Monitoring
      x-codegen-request-body-name: body
  /api/v2/security_monitoring/rules/{rule_id}:
    delete:
      description: Delete an existing rule. Default rules cannot be deleted.
      operationId: DeleteSecurityMonitoringRule
      parameters:
      - $ref: '#/components/parameters/SecurityMonitoringRuleID'
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete an existing rule
      tags:
      - Security Monitoring
    get:
      description: Get a rule's details.
      operationId: GetSecurityMonitoringRule
      parameters:
      - $ref: '#/components/parameters/SecurityMonitoringRuleID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringRuleResponse'
          description: OK
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      summary: Get a rule's details
      tags:
      - Security Monitoring
    put:
      description: 'Update an existing rule. When updating `cases`, `queries` or `options`,
        the whole field

        must be included. For example, when modifying a query all queries must be
        included.

        Default rules can only be updated to be enabled and to change notifications.'
      operationId: UpdateSecurityMonitoringRule
      parameters:
      - $ref: '#/components/parameters/SecurityMonitoringRuleID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityMonitoringRuleUpdatePayload'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringRuleResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/ConcurrentModificationResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      summary: Update an existing rule
      tags:
      - Security Monitoring
      x-codegen-request-body-name: body
  /api/v2/security_monitoring/signals:
    get:
      description: 'The list endpoint returns security signals that match a search
        query.

        Both this endpoint and the POST endpoint can be used interchangeably when
        listing

        security signals.'
      operationId: ListSecurityMonitoringSignals
      parameters:
      - description: The search query for security signals.
        example: security:attack status:high
        in: query
        name: filter[query]
        required: false
        schema:
          type: string
      - description: The minimum timestamp for requested security signals.
        example: '2019-01-02T09:42:36.320Z'
        in: query
        name: filter[from]
        required: false
        schema:
          format: date-time
          type: string
      - description: The maximum timestamp for requested security signals.
        example: '2019-01-03T09:42:36.320Z'
        in: query
        name: filter[to]
        required: false
        schema:
          format: date-time
          type: string
      - description: The order of the security signals in results.
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/SecurityMonitoringSignalsSort'
      - description: A list of results using the cursor provided in the previous query.
        example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
        in: query
        name: page[cursor]
        required: false
        schema:
          type: string
      - description: The maximum number of security signals in the response.
        example: 25
        in: query
        name: page[limit]
        required: false
        schema:
          default: 10
          format: int32
          maximum: 1000
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringSignalsListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
      summary: Get a quick list of security signals
      tags:
      - Security Monitoring
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/security_monitoring/signals/search:
    post:
      description: 'Returns security signals that match a search query.

        Both this endpoint and the GET endpoint can be used interchangeably for listing

        security signals.'
      operationId: SearchSecurityMonitoringSignals
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityMonitoringSignalListRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringSignalsListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
      summary: Get a list of security signals
      tags:
      - Security Monitoring
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/services:
    get:
      description: Get all services for the requesting user's organization. If the
        `include[users]` query parameter is provided, the included attribute will
        contain the users related to these services.
      operationId: GetServices
      parameters:
      - $ref: '#/components/parameters/ServiceIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get a list of all services
      tags:
      - Services
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new service.
      operationId: CreateService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        description: Service Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new service
      tags:
      - Services
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/services/{service_id}:
    delete:
      description: Deletes an existing service.
      operationId: DeleteService
      parameters:
      - $ref: '#/components/parameters/ServiceIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Delete an existing service
      tags:
      - Services
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get details of a service. If the `include[users]` query parameter
        is provided, the included attribute will contain the users related to these
        services
      operationId: GetService
      parameters:
      - $ref: '#/components/parameters/ServiceIDPathParameter'
      - $ref: '#/components/parameters/ServiceIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get details of a service
      tags:
      - Services
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing service. Only provide the attributes which
        should be updated as this request is a partial update.
      operationId: PatchService
      parameters:
      - $ref: '#/components/parameters/ServiceIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        description: Service Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing service
      tags:
      - Services
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/teams:
    get:
      description: Get all teams for the requesting user's organization. If the `include[users]`
        query parameter is provided, the included attribute will contain the users
        related to these teams.
      operationId: GetTeams
      parameters:
      - $ref: '#/components/parameters/TeamIncludeQueryParameter'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
      summary: Get a list of all teams
      tags:
      - Teams
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    post:
      description: Creates a new team.
      operationId: CreateTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
        description: Teams Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Create a new team
      tags:
      - Teams
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/teams/{team_id}:
    delete:
      description: Deletes an existing team.
      operationId: DeleteTeam
      parameters:
      - $ref: '#/components/parameters/TeamIDPathParameter'
      responses:
        '204':
          $ref: '#/components/responses/204DefaultResponse'
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Delete an existing team
      tags:
      - Teams
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    get:
      description: Get details of a team. If the `include[users]` query parameter
        is provided, the included attribute will contain the users related to these
        teams.
      operationId: GetTeam
      parameters:
      - $ref: '#/components/parameters/TeamIDPathParameter'
      - $ref: '#/components/parameters/TeamIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Get details of a team
      tags:
      - Teams
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    patch:
      description: Updates an existing team. Only provide the attributes which should
        be updated as this request is a partial update.
      operationId: PatchTeam
      parameters:
      - $ref: '#/components/parameters/TeamIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
        description: Teams Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
          description: OK
        '400':
          $ref: '#/components/responses/400DefaultResponse'
        '401':
          $ref: '#/components/responses/401DefaultResponse'
        '403':
          $ref: '#/components/responses/403DefaultResponse'
        '404':
          $ref: '#/components/responses/404DefaultResponse'
      summary: Update an existing team
      tags:
      - Teams
      x-codegen-request-body-name: body
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v2/user_invitations:
    post:
      description: Sends emails to one or more users inviting them to join the organization.
      operationId: SendInvitations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInvitationsRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Send invitation emails
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/user_invitations/{user_invitation_uuid}:
    get:
      description: Returns a single user invitation by its UUID.
      operationId: GetInvitation
      parameters:
      - description: The UUID of the user invitation.
        in: path
        name: user_invitation_uuid
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user invitation
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users:
    get:
      description: Get the list of all users in the organization. This list includes
        all users even if they are disabled or unverified.
      operationId: ListUsers
      parameters:
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageNumber'
      - description: 'User attribute to order results by. Sort order is ascending
          by default. Sort order is descending if the field is prefixed by a negative
          sign, for example `sort=-name`. Options: `name`, `modified_at`, `user_count`.'
        in: query
        name: sort
        required: false
        schema:
          default: name
          type: string
      - description: 'Direction of sort. Options: `asc`, `desc`.'
        in: query
        name: sort_dir
        required: false
        schema:
          $ref: '#/components/schemas/QuerySortOrder'
      - description: Filter all users by the given string. Defaults to no filtering.
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: 'Filter on status attribute.

          Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.

          Defaults to no filtering.'
        in: query
        name: filter[status]
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List all users
      tags:
      - Users
      x-codegen-request-body-name: body
    post:
      description: Create a user for your organization.
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create a user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}:
    delete:
      description: Disable a user. Can only be used with an application key belonging
        to an administrator user.
      operationId: DisableUser
      parameters:
      - $ref: '#/components/parameters/UserID'
      responses:
        '204':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Disable a user
      tags:
      - Users
      x-codegen-request-body-name: body
    get:
      description: "Get a user in the organization specified by the user\u2019s `user_id`."
      operationId: GetUser
      parameters:
      - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK for get user
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user
      tags:
      - Users
      x-codegen-request-body-name: body
    patch:
      description: Edit a user. Can only be used with an application key belonging
        to an administrator user.
      operationId: UpdateUser
      parameters:
      - $ref: '#/components/parameters/UserID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Unprocessable Entity
      summary: Update a user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}/orgs:
    get:
      description: Get a user organization. Returns the user information and all organizations
        joined by this user.
      operationId: ListUserOrganizations
      parameters:
      - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user organization
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}/permissions:
    get:
      description: "Get a user permission set. Returns a list of the user\u2019s permissions\
        \ granted by the associated user's roles."
      operationId: ListUserPermissions
      parameters:
      - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user permissions
      tags:
      - Users
      x-codegen-request-body-name: body
security:
- apiKeyAuth: []
  appKeyAuth: []
servers:
- url: https://{subdomain}.{site}
  variables:
    site:
      default: datadoghq.com
      description: The regional site for our customers.
      enum:
      - datadoghq.com
      - datadoghq.eu
    subdomain:
      default: api
      description: The subdomain where the API is deployed.
- url: '{protocol}://{name}'
  variables:
    name:
      default: api.datadoghq.com
      description: Full site DNS name.
    protocol:
      default: https
      description: The protocol for accessing the API.
tags:
- description: '[See API version 1](/api/v1/aws-integration/).'
  name: AWS Integration
- description: '[See API version 1](/api/v1/aws-logs-integration/).'
  name: AWS Logs Integration
- description: "All requests to Datadog\u2019s API must be authenticated.\nRequests\
    \ that write data require reporting access and require an `API key`.\nRequests\
    \ that read data require full access and also require an `application key`.\n\n\
    **Note:** All Datadog API clients are configured by default to consume Datadog\
    \ US site APIs.\nIf you are on the Datadog EU site, set the environment variable\
    \ `DATADOG_HOST` to\n`https://api.datadoghq.eu` or override this value directly\
    \ when creating your client.\n\n[Manage your account\u2019s API and application\
    \ keys](https://app.datadoghq.com/account/settings#api).\n\n## Validate API key\n\
    \n[See API version 1](/api/v1/authentication/#validate-api-key)."
  name: Authentication
- description: '[See API version 1](/api/v1/azure-integration/).'
  name: Azure Integration
- description: 'Interact with your dashboard lists through the API to make it easier
    to

    organize, find, and share all of your dashboards with your team and

    organization.'
  name: Dashboard Lists
- description: '[See API version 1](/api/v1/dashboards/).'
  name: Dashboards
- description: '[See API version 1](/api/v1/downtimes/).'
  name: Downtimes
- description: '[See API version 1](/api/v1/embeddable-graphs/).'
  name: Embeddable Graphs
- description: '[See API version 1](/api/v1/events/).'
  name: Events
- description: '[See API version 1](/api/v1/gcp-integration/).'
  name: GCP Integration
- description: '[See API version 1](/api/v1/hosts/).'
  name: Hosts
- description: '[See API version 1](/api/v1/ip-ranges/).'
  name: IP Ranges
- description: Interact with incidents api endpoints.
  name: Incidents
- description: '[See API version 1](/api/v1/key-management/).'
  name: Key Management
- description: 'Search your logs in the Datadog platform over HTTP.


    [See API version 1](/api/v1/logs/) for sending logs.'
  name: Logs
- description: 'Archives forward all the logs ingested to a cloud storage system.


    See the [Archives Page](https://app.datadoghq.com/logs/pipelines/archives)

    for a list of the archives currently configured in our UI.'
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/logs/archives/
  name: Logs Archives
- description: '[See API version 1](/api/v1/logs-indexes/).'
  name: Logs Indexes
- description: '[See API version 1](/api/v1/logs-pipelines/).'
  name: Logs Pipelines
- description: "**Note: This endpoint is in public beta. If you have any feedback,\
    \ contact [Datadog support](https://docs.datadoghq.com/help/).**\n\nTo grant read\
    \ access on log data at all, you must grant the `logs_read_data` permission.\n\
    From there you can limit what data a role grants read access to by associating\
    \ a Restriction Query with that role.\n\nA Restriction Query is a logs query that\
    \ restricts which logs the `logs_read_data` permission grants read access to.\n\
    For users whose roles have Restriction Queries, any log query they make only returns\
    \ those log events that also match\none of their Restriction Queries. This is\
    \ true whether the user queries log events from any log-related feature, including\n\
    the log explorer, Live Tail, re-hydration, or a dashboard widget.\n\nRestriction\
    \ Queries currently only support use of the following components of log events:\n\
    \n- Reserved attributes\n- The log message\n- Tags\n\nThe recommended way to manage\
    \ restricted read access on log data for customers with large or complicated organizational\
    \ structures\nis to add a team tag to log events to indicate which team(s) own(s)\
    \ them, and then to scope Restriction Queries to the appropriate\nvalues of the\
    \ team tag. Tags can be applied to log events in many ways, and a log event can\
    \ have multiple tags with the same key (like team)\nand different values\u2014\
    in this way the same log event can be visible to roles whose restriction queries\
    \ are scoped to different team values.\n\nYou need an API and application key\
    \ with Admin rights to interact with this endpoint."
  name: Logs Restriction Queries
- description: '[See API version 1](/api/v1/metrics/).'
  name: Metrics
- description: '[See API version 1](/api/v1/monitors/).'
  name: Monitors
- description: '[See API version 1](/api/v1/organizations/).'
  name: Organizations
- description: '[See API version 1](/api/v1/pagerduty-integration/).'
  name: PagerDuty Integration
- description: 'The Roles API is used to create and manage Datadog roles, what

    [global permissions](https://docs.datadoghq.com/account_management/rbac/)

    they grant, and which users belong to them.


    Permissions related to specific account assets can be granted to roles

    in the Datadog application without using this API. For example, granting

    read access on a specific log index to a role can be done in Datadog from the

    [Pipelines page](https://app.datadoghq.com/logs/pipelines).'
  name: Roles
- description: '[See API version 1](/api/v1/screenboards/).'
  name: Screenboards
- description: Detection rules for generating signals and listing of generated signals
  name: Security Monitoring
- description: '[See API version 1](/api/v1/service-checks/).'
  name: Service Checks
- description: '[See API version 1](/api/v1/service-dependencies/).'
  name: Service Dependencies
- description: '[See API version 1](/api/v1/service-level-objectives/).'
  name: Service Level Objectives
- description: Create, update, delete and retrieve your organizations services.
  name: Services
- description: '[See API version 1](/api/v1/slack-integration/).'
  name: Slack Integration
- description: '[See API version 1](/api/v1/snapshots/).'
  name: Snapshots
- description: '[See API version 1](/api/v1/synthetics/).'
  name: Synthetics
- description: '[See API version 1](/api/v1/tags/).'
  name: Tags
- description: Create, update, delete and retrieve your organizations Teams.
  name: Teams
- description: '[See API version 1](/api/v1/timeboards/).'
  name: Timeboards
- description: '[See API version 1](/api/v1/tracing/).'
  name: Tracing
- description: '[See API version 1](/api/v1/usage-metering/).'
  name: Usage Metering
- description: Create, edit, and disable users.
  externalDocs:
    url: https://docs.datadoghq.com/account_management/users
  name: Users
- description: '[See API version 1](/api/v1/webhooks-integration/).'
  name: Webhooks Integration
x-group-parameters: true
